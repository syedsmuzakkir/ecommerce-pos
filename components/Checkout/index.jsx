// // import React, { useState } from "react";
// // import { AntDesign } from "@expo/vector-icons";
// // import { View, Text, Pressable, Image, ScrollView, Alert } from "react-native";
// // import { useSelector, useDispatch } from "react-redux";
// // import { useNavigation } from "@react-navigation/native";
// // import { emptyCart, createOrder } from "../../redux/slice/customerSlice";
// // // import { removeCart } from '../../redux/slice/Product'

// // const Checkout = () => {
// //   const navigation = useNavigation();
// //   const dispatch = useDispatch();
// //   const checkout = useSelector((state) => state.CustomerSlice.cart);
// //   const subtotal = checkout
// //     .filter((item) => item && typeof item.price === "number")
// //     .reduce((acc, curr) => acc + curr.price * curr.quantity, 0);
// //   const ItemAdd = checkout.length;

// //   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility

// //   const handleGoToCheckout = () => {
// //     navigation.goBack();
// //   };

// //   const handleOrder = () => {
// //     dispatch(createOrder({ total: subtotal }));
// //   };

// //   const handleGoToCash = () => {
// //     if (checkout.length > 0) {
// //       navigation.navigate('Cash',{value:subtotal});
// //     } else {
// //       setShowAlert(true); // Show alert if the cart is empty
// //     }
// //   };

// //   const handleRemoveCart = () => {
// //     dispatch(emptyCart());
// //   };
// // import { clearCart } from "../../redux/slice/Product";
// // import { createOrder } from "../../redux/slice/customerSlice";
// // import { removeCart } from '../../redux/slice/Product';

// import React, {useState} from 'react';
// // import { AntDesign } from "@expo/vector-icons";
// // import { FontAwesome } from "@expo/vector-icons";
// import {
//   View,
//   Text,
//   Pressable,
//   Image,
//   ScrollView,
//   ToastAndroid,
//   Platform,
// } from 'react-native';
// import {useSelector, useDispatch} from 'react-redux';
// import {useNavigation} from '@react-navigation/native';
// // import { clearCart } from "../../redux/slice/Product";
// import AntDesign from 'react-native-vector-icons/AntDesign';

// import {emptyCart} from '../../redux/slice/customerSlice';
// import reactNativeHTMLToPdf from 'react-native-html-to-pdf';
// import RNFS from 'react-native-fs';
// // import {removeCart} from '../../redux/slice/Product'
// // import { useState } from "react";

// const Checkout = () => {
//   const navigation = useNavigation();
//   const dispatch = useDispatch();
//   const checkout = useSelector(state => state.CustomerSlice.cart);
//   // console.log("displaying data in console log while user click on checkout",checkout)
//   const subtotal = checkout
//     .filter(item => item && typeof item.price === 'number')
//     .reduce(
//       (acc, curr) =>
//         acc + (curr.perPrice ? curr.perPrice : curr.price) * curr.quantity,
//       0,
//     );
//   const ItemAdd = checkout.length;

//   const [showAlert, setShowAlert] = useState(false); // State to control alert visibility

//   const handleGoToCheckout = () => {
//     navigation.goBack();
//   };

//   console.log(
//     'chackout data of the cart',
//     checkout.map(item => item.id),
//   );
//   const orderArray = checkout.map(item => {
//     return {
//       productId: item.id,
//       quantity: item.quantity,
//     };
//   });

//   console.log('for mutation', orderArray);

//   const handleOrder = () => {
//     // dispatch(createOrder({ total: subtotal, items: orderArray }));
//   };

//   const handleGoToCash = () => {
//     if (checkout.length > 0) {
//       console.log('going to customers', {total: subtotal, items: orderArray});
//       navigation.navigate('Customers', {total: subtotal, items: orderArray});
//       // dispatch(createOrder({total: subtotal, items: orderArray}));
//       // navigation.navigate('Customers');
//     } else {
//       setShowAlert(true); // Show alert if the cart is empty
//     }
//   };

//   const handleRemoveCart = () => {
//     dispatch(emptyCart());
//   };
//   // const [Generete,setGenerate]=useState(checkout)
//   // console.log("cart items",Generete)
//   // Generate HTML content with fetched data
//   // const currentDate = new Date().toLocaleDateString();
//   // const currentTime = new Date().toLocaleTimeString([], {
//   //   hour: '2-digit',
//   //   minute: '2-digit',
//   // });
//   //   const htmlContent = `
//   //  <html>
//   //   <body>
//   //     <h1 style="color: blue; font-size: 30px; font-family: Arial; text-align: center; font-weight: 600;">Synectiks Farm</h1>
//   //     <div style="display: flex; justify-content: space-between; padding:30px">
//   //     <div>
//   //         <p>Customer Name: Mohammed Nadeem</p>
//   //         <p>Phone-Number: +91-8142340247</p>
//   //     </div>
//   //     <div>
//   //         <p>${currentDate}</p>
//   //         <p>${currentTime}</p>
//   //     </div>
//   // </div>

//   //     <table style="width:100%">
//   //       <tr>
//   //         <th>Name</th>
//   //         <th>Image</th>
//   //         <th>Name</th>
//   //         <th>Price</th>
//   //         <th>Quantity</th>
//   //         <th>Total</th>
//   //       </tr>
//   //       ${checkout.map((data, index) => {
//   //         return `
//   //         <tr style="text-align: center">
//   //           <td>${index + 1}</td>
//   //           <td><img src="${
//   //             data.image
//   //           }" alt="Product Image" style="width: 50px; height: 50px;"></td>
//   //           <td>${data.name}</td>
//   //           <td>${data.price}</td>
//   //           <td>${data.quantity}</td>
//   //           <td>${data.price * data.quantity}</td>
//   //           </tr>
//   //           `;
//   //       })}
//   //           <tr>
//   //    <td colspan="6" style="text-align: right;  font-size: 20px">Subtotal: ${subtotal}</td>

//   //  </tr>
//   //     </table>

//   //   </body>
//   // </html>

//   //       `;
//   // <p>Tax: ${data.price}</p>

//   // const generatePdf = async () => {
//   //   try {
//   //     const options = {
//   //       html: htmlContent,
//   //       fileName: 'total-amount',
//   //       directory: RNFS.DownloadDirectory, // Save in the downloads directory
//   //     };

//   //     const file = await reactNativeHTMLToPdf.convert(options);
//   //     console.log(file);

//   //     const base64String = await RNFS.readFile(file.filePath, 'base64');
//   //     console.log('Base64 encoded string:', base64String);
//   //     sendBills(base64String);

//   //     // Show success message
//   //     if (Platform.OS === 'android') {
//   //       ToastAndroid.show('PDF downloaded successfully!', ToastAndroid.SHORT);
//   //     } else {
//   //       Alert.alert('Success', 'PDF downloaded successfully!');
//   //     }
//   //   } catch (error) {
//   //     console.error('Error generating PDF:', error);
//   //     // Show error message
//   //     if (Platform.OS === 'android') {
//   //       ToastAndroid.show('Failed to download PDF', ToastAndroid.SHORT);
//   //     } else {
//   //       Alert.alert('Error', 'Failed to download PDF');
//   //     }
//   //   }
//   //   // sendBills(Bill)
//   // };

//   // // ------- api fetching------
//   // const sendBills = async content => {
//   //   const myHeaders = new Headers();
//   //   myHeaders.append('Content-Type', 'application/json');

//   //   const raw = JSON.stringify({
//   //     content: content,
//   //     name: 'directory',
//   //     phoneNumber: '9505934716',
//   //   });

//   //   const requestOptions = {
//   //     method: 'POST',
//   //     headers: myHeaders,
//   //     body: raw,
//   //     redirect: 'follow',
//   //   };
//   //   try {
//   //     const response = await fetch(
//   //       'https://2evfwh96lk.execute-api.us-east-1.amazonaws.com/sendBills',
//   //       requestOptions,
//   //     ); // Corrected options to requestOptions
//   //     if (response.ok) {
//   //       console.log('Pdf send');
//   //     }
//   //     if (!response.ok) {
//   //       // throw new Error(HTTP error! Status: ${response.status});
//   //     }
//   //     return await response.text();
//   //   } catch (error) {
//   //     console.error(error);
//   //     return null; // Return null or handle the error as needed
//   //   }
//   // };

//   return (
//     <View
//       style={{
//         padding: 10,
//         height: '100%',
//         flex: 1,
//         justifyContent: '',
//         position: 'relative',
//         color: 'black',
//       }}>
//       <View style={{marginTop: 30, marginLeft: 15}}>
//         <AntDesign
//           name="close"
//           size={30}
//           color="blue"
//           onPress={handleGoToCheckout}
//         />
//       </View>
//       <View
//         style={{
//           borderBottomColor: 'lightgray',
//           borderBottomWidth: 1,
//           marginVertical: 8,
//           color: 'white',
//         }}
//       />
//       <View
//         style={{
//           flexDirection: 'row',
//           justifyContent: 'space-between',
//           alignItems: 'center',
//           paddingHorizontal: 10,
//           marginTop: 10,
//           color: 'black',
//         }}>
//         <Text style={{fontSize: 20, fontWeight: '700', color: 'black'}}>
//           Cart
//         </Text>
//         <View
//           style={{
//             flexDirection: 'row',
//             justifyContent: 'space-between',
//             alignItems: 'center',
//             borderRadius: 50,
//             padding: 6,
//             backgroundColor: 'pink',
//           }}>
//           <AntDesign
//             onPress={handleRemoveCart}
//             name="delete"
//             size={18}
//             color="red"
//           />
//         </View>
//       </View>
//       <ScrollView
//         style={{
//           marginTop: 10,
//           marginBottom: 10,
//           overflow: 'scroll',
//           paddingTop: 10,
//         }}>
//         {checkout.length === 0 ? (
//           <View style={{paddingHorizontal: 20}}>
//             <Text style={{fontSize: 20, color: 'black'}}>
//               No items available in the cart.
//             </Text>
//           </View>
//         ) : (
//           checkout.map((e, index) => (
//             <View
//               key={index}
//               style={{
//                 flexDirection: 'row',
//                 justifyContent: 'space-between',
//                 paddingHorizontal: 20,
//                 alignItems: 'center',
//                 paddingVertical: 15,
//               }}>
//               <View
//                 style={{
//                   flexDirection: 'row',
//                   alignItems: 'center',
//                   gap: 20,
//                   position: 'relative',
//                 }}>
//                 <Image
//                   source={{
//                     uri: e.image,
//                   }}
//                   style={{width: 70, height: 70, borderRadius: 10}}
//                 />
//                 <View>
//                   {!e.perPrice && (
//                     <Text
//                       style={{
//                         width: 25,
//                         height: 25,
//                         position: 'absolute',
//                         right: 12,
//                         bottom: 17,
//                         backgroundColor: 'black',
//                         color: 'white',
//                         padding: 3,
//                         borderRadius: 40,
//                         textAlign: 'center',
//                       }}>
//                       {e.quantity}
//                     </Text>
//                   )}
//                 </View>
//                 <View style={{color: 'black'}}>
//                   <Text style={{fontSize: 16, color: 'black'}}>{e.name}</Text>
//                   <Text style={{fontSize: 16, color: 'black'}}>Tax-exempt</Text>
//                   {e.perPrice && (
//                     <Text style={{fontSize: 12, color: 'black'}}>
//                       {' '}
//                       ( {e.quantity} gms )
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={{fontSize: 16}}>
//                 <Text style={{fontSize: 10, color: 'black'}}>
//                   {`${e.perPrice ? `` : `₹ ${e.price} x ${e.quantity}`}`}
//                 </Text>
//                 <Text style={{color: 'black'}}>
//                   ₹{' '}
//                   {(e.perPrice
//                     ? e.perPrice * e.quantity
//                     : e.price * e.quantity
//                   ).toFixed(2)}
//                 </Text>
//               </View>
//             </View>
//           ))
//         )}
//         <View
//           style={{
//             borderBottomColor: 'gray',
//             borderBottomWidth: 1,
//             marginVertical: 10,
//           }}
//         />
//       </ScrollView>
//       <View
//         style={{
//           flexDirection: 'row',
//           justifyContent: 'space-between',
//           paddingHorizontal: 10,
//           alignItems: 'center',
//         }}>
//         <Text style={{fontSize: 16, color: 'black'}}>Subtotal</Text>
//         <Text style={{fontSize: 16, color: 'black'}}>₹ {subtotal}</Text>
//       </View>
//       <View
//         style={{
//           borderBottomColor: 'gred',
//           borderBottomWidth: 1,
//           marginVertical: 10,
//           alignItems: 'center',
//           marginBottom: 20,
//         }}
//       />
//       <View
//         style={{
//           flexDirection: 'row',
//           justifyContent: 'space-between',
//           paddingHorizontal: 10,
//           // backgroundColor:"red",
//           marginBottom: 20,
//         }}>
//         <Text style={{fontSize: 16, marginTop: 5, color: 'black'}}>Taxes</Text>
//         <Text style={{fontSize: 16, color: 'black'}}>₹ 0.00</Text>
//       </View>

//       <View
//         style={{
//           color: 'white',
//         }}>
//         <View
//           style={{
//             flexDirection: 'row',
//             justifyContent: 'space-between',

//             fontSize: 16,
//             paddingHorizontal: 15,
//             marginBottom: 10,
//           }}>
//           <View>
//             <Text style={{fontSize: 16, color: 'black'}}>Total</Text>

//             <Text style={{fontSize: 16, color: 'black'}}>{ItemAdd} Item</Text>
//           </View>
//           <View>
//             <Text style={{fontSize: 16, color: 'black'}}>₹ {subtotal}</Text>
//           </View>
//         </View>
//         <Pressable
//           style={{
//             padding: 10,
//             backgroundColor: 'blue',
//             borderRadius: 5,
//             // marginLeft: 10
//           }}
//           onPress={handleGoToCash}>
//           <Text
//             style={{
//               color: 'white',
//               textAlign: 'center',
//               fontSize: 16,
//             }}>
//             Checkout
//           </Text>
//         </Pressable>
//       </View>

//       {/* Alert to inform user to add items to cart */}
//       {showAlert && (
//         <View
//           style={{
//             position: 'absolute',
//             top: 0,
//             left: 0,
//             right: 0,
//             bottom: 0,
//             justifyContent: 'center',
//             alignItems: 'center',
//             backgroundColor: 'rgba(0, 0, 0, 0.5)',
//             padding: 20,
//           }}>
//           <View
//             style={{backgroundColor: 'white', padding: 40, borderRadius: 10}}>
//             <Text style={{fontSize: 16, marginBottom: 10, color: 'black'}}>
//               Please add items to the cart before proceeding to checkout.
//             </Text>
//             <Pressable
//               onPress={() => setShowAlert(false)}
//               style={{padding: 10, backgroundColor: 'blue', borderRadius: 5}}>
//               <Text style={{color: 'white', textAlign: 'center'}}>OK</Text>
//             </Pressable>
//           </View>
//         </View>
//       )}

//       {/* <Pressable>
//         <Text
//           style={{
//             color: 'white',
//             backgroundColor: 'blue',
//             margin: 20,
//             padding: 10,
//           }}
//           onPress={generatePdf}>
//           Generate Pdf
//         </Text>
//       </Pressable> */}
//     </View>
//   );
// };

// export default Checkout;

import React, {useState , useRef} from 'react';
import {
  View,
  Text,
  Pressable,
  Image,
  ScrollView,
  StyleSheet,
  Dimensions,
  ToastAndroid,
  Platform,
  Button,
  TouchableOpacity,
  Animated,
  Modal,
  TouchableWithoutFeedback 
} from 'react-native';
import {useSelector, useDispatch} from 'react-redux';
import AntDesign from 'react-native-vector-icons/AntDesign';
import {addIndex, emptyCart} from '../../redux/slice/customerSlice';
import {removeFromCart} from '../../redux/slice/customerSlice';
import {removeItemfromCart} from '../../redux/slice/customerSlice';
import Svg, {Path} from 'react-native-svg';
import { TextInput } from 'react-native';
import ParticularItem from './CustomeQty';

import { useTabNavigation } from '../../App';
import NewUser from '../Customers/NewUser'





const CheckoutSvg = props => (
  <Svg
    width={182}
    height={204}
    viewBox="0 0 182 204"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}>
    <Path
      d="M172.806 74.2024C172.806 74.2024 144.41 95.166 169.787 148.608C192.324 196.071 130.334 209.524 104.902 201.75C71.9569 191.681 56.7831 146.237 29.8014 157.481C2.81964 168.726 -16.7236 103.699 22.8001 84.4069C71.9666 60.4085 43.7134 40.823 49.8659 20.2601C54.2816 5.50197 99.1034 -13.546 119.582 15.2878C136.814 39.5504 147.053 32.4982 156.174 30.3925C169.328 27.3557 195.046 52.4944 172.806 74.2024Z"
      fill="#9F9F9E"
      fillOpacity={0.8}
    />
    <Path
      d="M173.15 92.9236L172.955 94.1653C172.793 95.1998 172.237 96.1258 171.409 96.7397C170.581 97.3537 169.549 97.6052 168.541 97.439L168.452 97.4245C167.603 97.2845 166.732 97.4403 165.979 97.867C165.225 98.2938 164.633 98.9669 164.296 99.7791L136.981 165.666C136.193 167.57 134.806 169.149 133.041 170.15C131.275 171.151 129.234 171.517 127.243 171.189L51.0636 158.636C49.0276 158.306 47.164 157.268 45.7846 155.697C44.4052 154.126 43.5935 152.117 43.4854 150.006L39.7025 79.3596C39.6543 78.459 39.307 77.6025 38.7185 76.9324C38.13 76.2623 37.3356 75.8188 36.4674 75.6758C35.9679 75.5935 35.4892 75.4111 35.0585 75.139C34.6278 74.867 34.2535 74.5106 33.9571 74.0902C33.6607 73.6698 33.4479 73.1936 33.331 72.6889C33.214 72.1842 33.1951 71.6607 33.2754 71.1485L33.4699 69.9069C33.5501 69.3947 33.7279 68.9037 33.9932 68.462C34.2584 68.0202 34.6059 67.6364 35.0158 67.3324C35.4257 67.0284 35.89 66.8102 36.3821 66.6902C36.8742 66.5702 37.3845 66.5508 37.884 66.6331L70.154 71.9506C70.6496 72.0323 71.1576 71.9653 71.617 71.7577C72.0764 71.5501 72.4674 71.2108 72.7431 70.7806L95.2814 35.6082C95.5796 35.1404 96.0034 34.7711 96.5018 34.5448C97.0001 34.3185 97.5517 34.245 98.0898 34.333C98.4806 34.395 98.8537 34.5431 99.1833 34.7671C99.4946 34.976 99.7627 35.2457 99.9722 35.5608C100.182 35.876 100.329 36.2304 100.405 36.6038C100.48 36.9773 100.484 37.3624 100.415 37.7371C100.345 38.1119 100.205 38.469 100.001 38.788L80.135 69.7822C79.8962 70.1547 79.7522 70.5826 79.716 71.0269C79.6798 71.4712 79.7527 71.9176 79.9279 72.3256C80.1032 72.7336 80.3752 73.0901 80.7192 73.3626C81.0632 73.6351 81.4683 73.8149 81.8975 73.8857L124.846 80.9623C125.276 81.0331 125.715 80.9925 126.125 80.8441C126.535 80.6958 126.903 80.4446 127.194 80.1133C127.485 79.782 127.69 79.3812 127.792 78.9476C127.893 78.5139 127.887 78.0611 127.773 77.6305L118.358 41.8131C118.168 41.0691 118.272 40.2782 118.647 39.6124C119.023 38.9465 119.639 38.4595 120.362 38.2571C120.744 38.1502 121.143 38.1294 121.533 38.1962C122.071 38.2854 122.573 38.5325 122.977 38.9074C123.381 39.2824 123.671 39.7693 123.811 40.3094L134.472 80.9524C134.603 81.4496 134.87 81.8974 135.243 82.2422C135.616 82.5869 136.078 82.8137 136.574 82.8954L169.957 88.3963C170.457 88.4786 170.935 88.661 171.366 88.933C171.797 89.2051 172.171 89.5615 172.468 89.9818C172.764 90.4022 172.977 90.8784 173.094 91.3831C173.211 91.8879 173.23 92.4113 173.15 92.9236V92.9236Z"
      fill="#FC8019"
    />
    <Path
      d="M72.0281 83.2445L63.6156 81.8582C63.5474 81.847 63.4833 81.8946 63.4724 81.9645L53.4462 145.962C53.4352 146.032 53.4816 146.097 53.5497 146.109L61.9623 147.495C62.0304 147.506 62.0945 147.459 62.1055 147.389L72.1317 83.3914C72.1427 83.3215 72.0963 83.2557 72.0281 83.2445Z"
      fill="#FFF2E8"
    />
    <Path
      d="M141.669 94.516L133.256 93.1297C133.188 93.1185 133.124 93.166 133.113 93.236L123.087 157.233C123.076 157.303 123.122 157.369 123.19 157.38L131.603 158.766C131.671 158.778 131.735 158.73 131.746 158.66L141.772 94.6629C141.783 94.593 141.737 94.5272 141.669 94.516Z"
      fill="#FFF2E8"
    />
    <Path
      d="M89.3611 86.1188L80.9515 84.7294C80.8834 84.7181 80.8192 84.7656 80.8082 84.8355L70.7593 148.811C70.7484 148.881 70.7947 148.947 70.8628 148.958L79.2725 150.347C79.3406 150.359 79.4047 150.311 79.4157 150.241L89.4646 86.2657C89.4756 86.1958 89.4293 86.13 89.3611 86.1188Z"
      fill="#FFF2E8"
    />
    <Path
      d="M106.864 88.7816L98.4515 87.3953C98.3834 87.3841 98.3192 87.4317 98.3083 87.5016L88.2821 151.499C88.2712 151.569 88.3176 151.634 88.3857 151.646L96.7982 153.032C96.8664 153.043 96.9305 152.996 96.9414 152.926L106.968 88.9285C106.979 88.8586 106.932 88.7928 106.864 88.7816Z"
      fill="#FFF2E8"
    />
    <Path
      d="M124.27 91.6488L115.858 90.2625C115.79 90.2513 115.725 90.2989 115.715 90.3688L105.688 154.366C105.677 154.436 105.724 154.502 105.792 154.513L114.204 155.899C114.273 155.91 114.337 155.863 114.348 155.793L124.374 91.7957C124.385 91.7258 124.338 91.66 124.27 91.6488Z"
      fill="#FFF2E8"
    />
  </Svg>
);

const PlusIcon = props => (
  <Svg
    width={27}
    height={20}
    viewBox="0 0 27 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}>
    <Path
      d="M4.80435 8.69565C4.08398 8.69565 3.5 9.27965 3.5 10C3.5 10.7203 4.08398 11.3043 4.80435 11.3043V8.69565ZM13.5 11.3043C14.2203 11.3043 14.8043 10.7203 14.8043 10C14.8043 9.27965 14.2203 8.69565 13.5 8.69565V11.3043ZM13.5 8.69565C12.7797 8.69565 12.1957 9.27965 12.1957 10C12.1957 10.7203 12.7797 11.3043 13.5 11.3043V8.69565ZM22.1957 11.3043C22.916 11.3043 23.5 10.7203 23.5 10C23.5 9.27965 22.916 8.69565 22.1957 8.69565V11.3043ZM14.8043 10C14.8043 9.27965 14.2203 8.69565 13.5 8.69565C12.7797 8.69565 12.1957 9.27965 12.1957 10H14.8043ZM12.1957 18.6957C12.1957 19.416 12.7797 20 13.5 20C14.2203 20 14.8043 19.416 14.8043 18.6957H12.1957ZM12.1957 10C12.1957 10.7203 12.7797 11.3043 13.5 11.3043C14.2203 11.3043 14.8043 10.7203 14.8043 10H12.1957ZM14.8043 1.30435C14.8043 0.583983 14.2203 0 13.5 0C12.7797 0 12.1957 0.583983 12.1957 1.30435H14.8043ZM4.80435 11.3043H13.5V8.69565H4.80435V11.3043ZM13.5 11.3043H22.1957V8.69565H13.5V11.3043ZM13.5 10H12.1957V10.0017C12.1957 10.0019 12.1957 10.0038 12.1957 10.0038C12.1957 10.0037 12.1957 10.004 12.1957 10.0038C12.1957 10.0038 12.1957 10.0057 12.1957 10.0059C12.1957 10.0057 12.1957 10.0061 12.1957 10.0059C12.1957 10.0061 12.1957 10.0075 12.1957 10.0077C12.1957 10.0078 12.1957 10.0094 12.1957 10.0096C12.1957 10.0097 12.1957 10.0111 12.1957 10.0113C12.1957 10.0115 12.1957 10.013 12.1957 10.0134C12.1957 10.0136 12.1957 10.0151 12.1957 10.0155C12.1957 10.0157 12.1957 10.0176 12.1957 10.0177C12.1957 10.0174 12.1957 10.0181 12.1957 10.0177C12.1957 10.0181 12.1957 10.0191 12.1957 10.0195C12.1957 10.0191 12.1957 10.0198 12.1957 10.0195C12.1957 10.0198 12.1957 10.021 12.1957 10.0212C12.1957 10.0209 12.1957 10.0216 12.1957 10.0212C12.1957 10.0216 12.1957 10.0228 12.1957 10.0231C12.1957 10.0228 12.1957 10.0235 12.1957 10.0231C12.1957 10.0235 12.1957 10.0249 12.1957 10.0252C12.1957 10.0249 12.1957 10.0256 12.1957 10.0252C12.1957 10.0256 12.1957 10.027 12.1957 10.0273C12.1957 10.0268 12.1957 10.0277 12.1957 10.0273C12.1957 10.0277 12.1957 10.0292 12.1957 10.0296C12.1957 10.0292 12.1957 10.0299 12.1957 10.0296C12.1957 10.0299 12.1957 10.0315 12.1957 10.032C12.1957 10.0315 12.1957 10.0323 12.1957 10.032C12.1957 10.0323 12.1957 10.0341 12.1957 10.0344C12.1957 10.0341 12.1957 10.0348 12.1957 10.0344C12.1957 10.035 12.1957 10.0365 12.1957 10.037C12.1957 10.0365 12.1957 10.0376 12.1957 10.037C12.1957 10.0374 12.1957 10.0393 12.1957 10.0398C12.1957 10.0393 12.1957 10.0402 12.1957 10.0398C12.1957 10.0403 12.1957 10.0421 12.1957 10.0426C12.1957 10.0421 12.1957 10.0431 12.1957 10.0426C12.1957 10.0431 12.1957 10.0452 12.1957 10.0457C12.1957 10.0452 12.1957 10.0463 12.1957 10.0457C12.1957 10.0463 12.1957 10.0483 12.1957 10.0489C12.1957 10.0483 12.1957 10.0494 12.1957 10.0489C12.1957 10.0494 12.1957 10.0515 12.1957 10.0522C12.1957 10.0517 12.1957 10.0527 12.1957 10.0522C12.1957 10.0529 12.1957 10.055 12.1957 10.0555C12.1957 10.0562 12.1957 10.0567 12.1957 10.0574C12.1957 10.0579 12.1957 10.0584 12.1957 10.0591C12.1957 10.0598 12.1957 10.0603 12.1957 10.061C12.1957 10.0616 12.1957 10.0623 12.1957 10.0628C12.1957 10.0635 12.1957 10.0642 12.1957 10.0649C12.1957 10.0654 12.1957 10.0661 12.1957 10.0668C12.1957 10.0675 12.1957 10.068 12.1957 10.0687C12.1957 10.0694 12.1957 10.0701 12.1957 10.0708C12.1957 10.0715 12.1957 10.0722 12.1957 10.0729C12.1957 10.0736 12.1957 10.0743 12.1957 10.075C12.1957 10.0757 12.1957 10.0765 12.1957 10.0772C12.1957 10.0779 12.1957 10.0786 12.1957 10.0793C12.1957 10.0802 12.1957 10.0809 12.1957 10.0816C12.1957 10.0824 12.1957 10.0831 12.1957 10.0838C12.1957 10.0847 12.1957 10.0854 12.1957 10.0863C12.1957 10.087 12.1957 10.0878 12.1957 10.0885C12.1957 10.0894 12.1957 10.0903 12.1957 10.091C12.1957 10.0918 12.1957 10.0927 12.1957 10.0936C12.1957 10.0943 12.1957 10.0951 12.1957 10.096C12.1957 10.0969 12.1957 10.0977 12.1957 10.0986C12.1957 10.0993 12.1957 10.1002 12.1957 10.101C12.1957 10.1019 12.1957 10.103 12.1957 10.1038C12.1957 10.1047 12.1957 10.1056 12.1957 10.1064C12.1957 10.1073 12.1957 10.1082 12.1957 10.1092C12.1957 10.1101 12.1957 10.111 12.1957 10.112C12.1957 10.1129 12.1957 10.1139 12.1957 10.1148C12.1957 10.1157 12.1957 10.1167 12.1957 10.1176C12.1957 10.1186 12.1957 10.1197 12.1957 10.1205C12.1957 10.1216 12.1957 10.1226 12.1957 10.1235C12.1957 10.1245 12.1957 10.1256 12.1957 10.1266C12.1957 10.1275 12.1957 10.1285 12.1957 10.1296C12.1957 10.1306 12.1957 10.1317 12.1957 10.1327C12.1957 10.1337 12.1957 10.1348 12.1957 10.1358C12.1957 10.1369 12.1957 10.1381 12.1957 10.1391C12.1957 10.1402 12.1957 10.1412 12.1957 10.1423C12.1957 10.1435 12.1957 10.1445 12.1957 10.1456C12.1957 10.1468 12.1957 10.1478 12.1957 10.149C12.1957 10.1501 12.1957 10.1513 12.1957 10.1523C12.1957 10.1536 12.1957 10.1548 12.1957 10.1558C12.1957 10.157 12.1957 10.1583 12.1957 10.1595C12.1957 10.1605 12.1957 10.1617 12.1957 10.163C12.1957 10.1642 12.1957 10.1654 12.1957 10.1666C12.1957 10.1678 12.1957 10.169 12.1957 10.1703C12.1957 10.1715 12.1957 10.1727 12.1957 10.1739C12.1957 10.1753 12.1957 10.1765 12.1957 10.1777C12.1957 10.1791 12.1957 10.1803 12.1957 10.1816C12.1957 10.183 12.1957 10.1842 12.1957 10.1856C12.1957 10.1868 12.1957 10.1882 12.1957 10.1894C12.1957 10.1908 12.1957 10.1922 12.1957 10.1934C12.1957 10.1948 12.1957 10.1962 12.1957 10.1976C12.1957 10.199 12.1957 10.2002 12.1957 10.2016C12.1957 10.203 12.1957 10.2043 12.1957 10.2057C12.1957 10.2071 12.1957 10.2087 12.1957 10.2101C12.1957 10.2115 12.1957 10.2129 12.1957 10.2143C12.1957 10.2158 12.1957 10.2172 12.1957 10.2186C12.1957 10.2202 12.1957 10.2216 12.1957 10.2231C12.1957 10.2245 12.1957 10.2261 12.1957 10.2275C12.1957 10.229 12.1957 10.2306 12.1957 10.232C12.1957 10.2336 12.1957 10.2351 12.1957 10.2367C12.1957 10.2381 12.1957 10.2397 12.1957 10.2412C12.1957 10.2428 12.1957 10.2443 12.1957 10.2459C12.1957 10.2475 12.1957 10.249 12.1957 10.2508C12.1957 10.2523 12.1957 10.2539 12.1957 10.2555C12.1957 10.2572 12.1957 10.2588 12.1957 10.2603C12.1957 10.2621 12.1957 10.2637 12.1957 10.2654C12.1957 10.267 12.1957 10.2687 12.1957 10.2704C12.1957 10.272 12.1957 10.2737 12.1957 10.2755C12.1957 10.2772 12.1957 10.2788 12.1957 10.2805C12.1957 10.2823 12.1957 10.284 12.1957 10.2857C12.1957 10.2875 12.1957 10.2892 12.1957 10.291C12.1957 10.2929 12.1957 10.2946 12.1957 10.2963C12.1957 10.2981 12.1957 10.3 12.1957 10.3017C12.1957 10.3035 12.1957 10.3054 12.1957 10.3071C12.1957 10.309 12.1957 10.3108 12.1957 10.3127C12.1957 10.3146 12.1957 10.3163 12.1957 10.3183C12.1957 10.3202 12.1957 10.3221 12.1957 10.324C12.1957 10.3259 12.1957 10.3278 12.1957 10.3297C12.1957 10.3317 12.1957 10.3336 12.1957 10.3355C12.1957 10.3374 12.1957 10.3393 12.1957 10.3412C12.1957 10.3433 12.1957 10.3452 12.1957 10.3473C12.1957 10.3492 12.1957 10.3511 12.1957 10.3532C12.1957 10.3551 12.1957 10.3572 12.1957 10.3593C12.1957 10.3612 12.1957 10.3633 12.1957 10.3654C12.1957 10.3675 12.1957 10.3696 12.1957 10.3717C12.1957 10.3737 12.1957 10.3758 12.1957 10.3779C12.1957 10.38 12.1957 10.3821 12.1957 10.3842C12.1957 10.3863 12.1957 10.3883 12.1957 10.3906C12.1957 10.3927 12.1957 10.395 12.1957 10.397C12.1957 10.3993 12.1957 10.4014 12.1957 10.4037C12.1957 10.4057 12.1957 10.408 12.1957 10.4103C12.1957 10.4123 12.1957 10.4146 12.1957 10.4169C12.1957 10.4191 12.1957 10.4214 12.1957 10.4237C12.1957 10.4259 12.1957 10.4282 12.1957 10.4304C12.1957 10.4327 12.1957 10.4351 12.1957 10.4374C12.1957 10.4397 12.1957 10.4421 12.1957 10.4443C12.1957 10.4468 12.1957 10.449 12.1957 10.4515C12.1957 10.4537 12.1957 10.4562 12.1957 10.4586C12.1957 10.4609 12.1957 10.4633 12.1957 10.4657C12.1957 10.4682 12.1957 10.4706 12.1957 10.473C12.1957 10.4755 12.1957 10.4779 12.1957 10.4803C12.1957 10.4828 12.1957 10.4854 12.1957 10.4878C12.1957 10.4903 12.1957 10.4929 12.1957 10.4953C12.1957 10.4979 12.1957 10.5003 12.1957 10.503C12.1957 10.5054 12.1957 10.508 12.1957 10.5106C12.1957 10.5132 12.1957 10.5157 12.1957 10.5183C12.1957 10.5209 12.1957 10.5235 12.1957 10.5261C12.1957 10.5287 12.1957 10.5313 12.1957 10.5341C12.1957 10.5367 12.1957 10.5393 12.1957 10.5419C12.1957 10.5447 12.1957 10.5473 12.1957 10.5501C12.1957 10.5527 12.1957 10.5555 12.1957 10.5581C12.1957 10.5609 12.1957 10.5637 12.1957 10.5664C12.1957 10.569 12.1957 10.5718 12.1957 10.5746C12.1957 10.5774 12.1957 10.5802 12.1957 10.583C12.1957 10.5857 12.1957 10.5887 12.1957 10.5915C12.1957 10.5943 12.1957 10.5972 12.1957 10.6C12.1957 10.6028 12.1957 10.6057 12.1957 10.6087C12.1957 10.6115 12.1957 10.6144 12.1957 10.6174C12.1957 10.6202 12.1957 10.6231 12.1957 10.6261C12.1957 10.629 12.1957 10.632 12.1957 10.635C12.1957 10.6379 12.1957 10.6409 12.1957 10.6438C12.1957 10.647 12.1957 10.6499 12.1957 10.6529C12.1957 10.656 12.1957 10.659 12.1957 10.6621C12.1957 10.665 12.1957 10.6682 12.1957 10.6711C12.1957 10.6743 12.1957 10.6774 12.1957 10.6805C12.1957 10.6837 12.1957 10.6868 12.1957 10.6899C12.1957 10.693 12.1957 10.6962 12.1957 10.6993C12.1957 10.7024 12.1957 10.7056 12.1957 10.7089C12.1957 10.712 12.1957 10.7153 12.1957 10.7184C12.1957 10.7217 12.1957 10.7249 12.1957 10.7282C12.1957 10.7315 12.1957 10.7346 12.1957 10.7379C12.1957 10.7412 12.1957 10.7445 12.1957 10.7478C12.1957 10.7511 12.1957 10.7544 12.1957 10.7579C12.1957 10.7612 12.1957 10.7645 12.1957 10.7678C12.1957 10.7713 12.1957 10.7746 12.1957 10.7781C12.1957 10.7814 12.1957 10.7849 12.1957 10.7883C12.1957 10.7917 12.1957 10.7951 12.1957 10.7986C12.1957 10.8021 12.1957 10.8056 12.1957 10.809C12.1957 10.8125 12.1957 10.816 12.1957 10.8195C12.1957 10.823 12.1957 10.8266 12.1957 10.8301C12.1957 10.8337 12.1957 10.8372 12.1957 10.8409C12.1957 10.8443 12.1957 10.848 12.1957 10.8517C12.1957 10.8551 12.1957 10.8588 12.1957 10.8624C12.1957 10.8661 12.1957 10.8697 12.1957 10.8734C12.1957 10.877 12.1957 10.8807 12.1957 10.8845C12.1957 10.8882 12.1957 10.8918 12.1957 10.8957C12.1957 10.8993 12.1957 10.9031 12.1957 10.9068C12.1957 10.9106 12.1957 10.9144 12.1957 10.9183C12.1957 10.9219 12.1957 10.9257 12.1957 10.9296C12.1957 10.9334 12.1957 10.9372 12.1957 10.9412C12.1957 10.945 12.1957 10.9489 12.1957 10.9527C12.1957 10.9567 12.1957 10.9605 12.1957 10.9645C12.1957 10.9683 12.1957 10.9723 12.1957 10.9763C12.1957 10.9802 12.1957 10.9842 12.1957 10.9882C12.1957 10.9922 12.1957 10.9962 12.1957 11.0002C12.1957 11.0042 12.1957 11.0082 12.1957 11.0123C12.1957 11.0163 12.1957 11.0203 12.1957 11.0245C12.1957 11.0285 12.1957 11.0327 12.1957 11.0369C12.1957 11.0409 12.1957 11.045 12.1957 11.0492C12.1957 11.0534 12.1957 11.0576 12.1957 11.0617C12.1957 11.0659 12.1957 11.0701 12.1957 11.0743C12.1957 11.0784 12.1957 11.0828 12.1957 11.087C12.1957 11.0911 12.1957 11.0955 12.1957 11.0998C12.1957 11.104 12.1957 11.1083 12.1957 11.1127C12.1957 11.1169 12.1957 11.1212 12.1957 11.1256C12.1957 11.1299 12.1957 11.1343 12.1957 11.1388C12.1957 11.1431 12.1957 11.1475 12.1957 11.1518C12.1957 11.1563 12.1957 11.1607 12.1957 11.1652C12.1957 11.1696 12.1957 11.1741 12.1957 11.1786C12.1957 11.1831 12.1957 11.1875 12.1957 11.192C12.1957 11.1965 12.1957 11.201 12.1957 11.2057C12.1957 11.2103 12.1957 11.2148 12.1957 11.2193C12.1957 11.224 12.1957 11.2285 12.1957 11.2332C12.1957 11.2377 12.1957 11.2424 12.1957 11.2471C12.1957 11.2518 12.1957 11.2563 12.1957 11.261C12.1957 11.2657 12.1957 11.2704 12.1957 11.2751C12.1957 11.28 12.1957 11.2847 12.1957 11.2894C12.1957 11.2943 12.1957 11.299 12.1957 11.3038C12.1957 11.3085 12.1957 11.3134 12.1957 11.3183C12.1957 11.323 12.1957 11.3278 12.1957 11.3327C12.1957 11.3376 12.1957 11.3424 12.1957 11.3473C12.1957 11.3523 12.1957 11.3572 12.1957 11.3621C12.1957 11.3671 12.1957 11.372 12.1957 11.377C12.1957 11.3819 12.1957 11.387 12.1957 11.392C12.1957 11.397 12.1957 11.4019 12.1957 11.407C12.1957 11.412 12.1957 11.4172 12.1957 11.4223C12.1957 11.4273 12.1957 11.4323 12.1957 11.4376C12.1957 11.4426 12.1957 11.4478 12.1957 11.4529C12.1957 11.4581 12.1957 11.4633 12.1957 11.4683C12.1957 11.4736 12.1957 11.4788 12.1957 11.484C12.1957 11.4892 12.1957 11.4944 12.1957 11.4998C12.1957 11.505 12.1957 11.5103 12.1957 11.5157C12.1957 11.5209 12.1957 11.5263 12.1957 11.5317C12.1957 11.5369 12.1957 11.5423 12.1957 11.5477C12.1957 11.553 12.1957 11.5584 12.1957 11.5638C12.1957 11.5692 12.1957 11.5746 12.1957 11.5802C12.1957 11.5856 12.1957 11.591 12.1957 11.5965C12.1957 11.6019 12.1957 11.6075 12.1957 11.613C12.1957 11.6186 12.1957 11.6242 12.1957 11.6297C12.1957 11.6351 12.1957 11.6409 12.1957 11.6464C12.1957 11.652 12.1957 11.6576 12.1957 11.6633C12.1957 11.6689 12.1957 11.6746 12.1957 11.6802C12.1957 11.6859 12.1957 11.6917 12.1957 11.6974C12.1957 11.703 12.1957 11.7087 12.1957 11.7144C12.1957 11.7203 12.1957 11.7261 12.1957 11.7318C12.1957 11.7376 12.1957 11.7435 12.1957 11.7492C12.1957 11.7551 12.1957 11.7609 12.1957 11.7668C12.1957 11.7727 12.1957 11.7786 12.1957 11.7845C12.1957 11.7904 12.1957 11.7963 12.1957 11.8023C12.1957 11.8082 12.1957 11.8143 12.1957 11.8202C12.1957 11.8261 12.1957 11.8322 12.1957 11.8383C12.1957 11.8442 12.1957 11.8503 12.1957 11.8563C12.1957 11.8624 12.1957 11.8685 12.1957 11.8746C12.1957 11.8807 12.1957 11.8868 12.1957 11.893C12.1957 11.8991 12.1957 11.9052 12.1957 11.9115C12.1957 11.9177 12.1957 11.9238 12.1957 11.9301C12.1957 11.9363 12.1957 11.9426 12.1957 11.9489C12.1957 11.9551 12.1957 11.9614 12.1957 11.9677C12.1957 11.9739 12.1957 11.9803 12.1957 11.9866C12.1957 11.993 12.1957 11.9993 12.1957 12.0057C12.1957 12.0122 12.1957 12.0186 12.1957 12.025C12.1957 12.0315 12.1957 12.0379 12.1957 12.0443C12.1957 12.0508 12.1957 12.0572 12.1957 12.0638C12.1957 12.0703 12.1957 12.0769 12.1957 12.0835C12.1957 12.0899 12.1957 12.0965 12.1957 12.1031C12.1957 12.1097 12.1957 12.1163 12.1957 12.123C12.1957 12.1296 12.1957 12.1362 12.1957 12.143C12.1957 12.1496 12.1957 12.1563 12.1957 12.163C12.1957 12.1697 12.1957 12.1765 12.1957 12.1833C12.1957 12.1899 12.1957 12.1967 12.1957 12.2037C12.1957 12.2104 12.1957 12.2172 12.1957 12.224C12.1957 12.231 12.1957 12.2377 12.1957 12.2447C12.1957 12.2515 12.1957 12.2584 12.1957 12.2654C12.1957 12.2723 12.1957 12.2793 12.1957 12.2863C12.1957 12.2932 12.1957 12.3002 12.1957 12.3071C12.1957 12.3143 12.1957 12.3212 12.1957 12.3283C12.1957 12.3353 12.1957 12.3424 12.1957 12.3496C12.1957 12.3565 12.1957 12.3637 12.1957 12.3708C12.1957 12.3781 12.1957 12.3852 12.1957 12.3923C12.1957 12.3995 12.1957 12.4068 12.1957 12.4139C12.1957 12.4212 12.1957 12.4285 12.1957 12.4357C12.1957 12.443 12.1957 12.4503 12.1957 12.4576C12.1957 12.4649 12.1957 12.4722 12.1957 12.4797C12.1957 12.487 12.1957 12.4943 12.1957 12.5017C12.1957 12.5092 12.1957 12.5165 12.1957 12.524C12.1957 12.5315 12.1957 12.539 12.1957 12.5464C12.1957 12.5539 12.1957 12.5614 12.1957 12.5689C12.1957 12.5765 12.1957 12.584 12.1957 12.5917C12.1957 12.5991 12.1957 12.6068 12.1957 12.6144C12.1957 12.6221 12.1957 12.6297 12.1957 12.6374C12.1957 12.645 12.1957 12.6527 12.1957 12.6603C12.1957 12.6682 12.1957 12.6758 12.1957 12.6837C12.1957 12.6913 12.1957 12.6991 12.1957 12.707C12.1957 12.7148 12.1957 12.7226 12.1957 12.7304C12.1957 12.7383 12.1957 12.7461 12.1957 12.7541C12.1957 12.7619 12.1957 12.7699 12.1957 12.7777C12.1957 12.7857 12.1957 12.7937 12.1957 12.8016C12.1957 12.8096 12.1957 12.8176 12.1957 12.8257C12.1957 12.8337 12.1957 12.8417 12.1957 12.8497C12.1957 12.8579 12.1957 12.8659 12.1957 12.8741C12.1957 12.8823 12.1957 12.8904 12.1957 12.8986C12.1957 12.9066 12.1957 12.915 12.1957 12.9231C12.1957 12.9313 12.1957 12.9395 12.1957 12.9478C12.1957 12.956 12.1957 12.9643 12.1957 12.9727C12.1957 12.9809 12.1957 12.9892 12.1957 12.9976C12.1957 13.0059 12.1957 13.0143 12.1957 13.0228C12.1957 13.0311 12.1957 13.0395 12.1957 13.048C12.1957 13.0565 12.1957 13.0649 12.1957 13.0734C12.1957 13.0819 12.1957 13.0904 12.1957 13.099C12.1957 13.1075 12.1957 13.116 12.1957 13.1247C12.1957 13.1332 12.1957 13.1417 12.1957 13.1504C12.1957 13.1591 12.1957 13.1677 12.1957 13.1763C12.1957 13.185 12.1957 13.1937 12.1957 13.2024C12.1957 13.2113 12.1957 13.22 12.1957 13.2287C12.1957 13.2376 12.1957 13.2463 12.1957 13.2551C12.1957 13.264 12.1957 13.2729 12.1957 13.2817C12.1957 13.2906 12.1957 13.2995 12.1957 13.3083C12.1957 13.3172 12.1957 13.3263 12.1957 13.3351C12.1957 13.3442 12.1957 13.3532 12.1957 13.3621C12.1957 13.3711 12.1957 13.3802 12.1957 13.3892C12.1957 13.3983 12.1957 13.4075 12.1957 13.4165C12.1957 13.4256 12.1957 13.4348 12.1957 13.444C12.1957 13.453 12.1957 13.4623 12.1957 13.4715C12.1957 13.4807 12.1957 13.4899 12.1957 13.4991C12.1957 13.5085 12.1957 13.5177 12.1957 13.527C12.1957 13.5363 12.1957 13.5457 12.1957 13.555C12.1957 13.5643 12.1957 13.5737 12.1957 13.5831C12.1957 13.5925 12.1957 13.6021 12.1957 13.6115C12.1957 13.6209 12.1957 13.6304 12.1957 13.6398C12.1957 13.6494 12.1957 13.659 12.1957 13.6685C12.1957 13.6781 12.1957 13.6877 12.1957 13.6972C12.1957 13.7068 12.1957 13.7165 12.1957 13.7261C12.1957 13.7358 12.1957 13.7454 12.1957 13.7551C12.1957 13.7649 12.1957 13.7746 12.1957 13.7843C12.1957 13.7941 12.1957 13.8038 12.1957 13.8137C12.1957 13.8235 12.1957 13.8332 12.1957 13.8431C12.1957 13.853 12.1957 13.863 12.1957 13.8727C12.1957 13.8826 12.1957 13.8927 12.1957 13.9026C12.1957 13.9125 12.1957 13.9224 12.1957 13.9325C12.1957 13.9424 12.1957 13.9525 12.1957 13.9626C12.1957 13.9727 12.1957 13.9828 12.1957 13.9929C12.1957 14.003 12.1957 14.013 12.1957 14.0233C12.1957 14.0334 12.1957 14.0437 12.1957 14.0537C12.1957 14.064 12.1957 14.0743 12.1957 14.0845C12.1957 14.0948 12.1957 14.105 12.1957 14.1153C12.1957 14.1257 12.1957 14.136 12.1957 14.1464C12.1957 14.1567 12.1957 14.1671 12.1957 14.1776C12.1957 14.188 12.1957 14.1984 12.1957 14.2089C12.1957 14.2193 12.1957 14.2299 12.1957 14.2403C12.1957 14.251 12.1957 14.2614 12.1957 14.272C12.1957 14.2826 12.1957 14.2932 12.1957 14.3038C12.1957 14.3144 12.1957 14.3252 12.1957 14.3358C12.1957 14.3464 12.1957 14.3572 12.1957 14.368C12.1957 14.3786 12.1957 14.3894 12.1957 14.4002C12.1957 14.411 12.1957 14.4217 12.1957 14.4327C12.1957 14.4435 12.1957 14.4543 12.1957 14.4652C12.1957 14.4762 12.1957 14.487 12.1957 14.4979C12.1957 14.5089 12.1957 14.5198 12.1957 14.531C12.1957 14.5419 12.1957 14.5529 12.1957 14.564C12.1957 14.575 12.1957 14.5861 12.1957 14.5972C12.1957 14.6083 12.1957 14.6195 12.1957 14.6306C12.1957 14.6417 12.1957 14.6529 12.1957 14.6642C12.1957 14.6753 12.1957 14.6866 12.1957 14.6979C12.1957 14.709 12.1957 14.7203 12.1957 14.7318C12.1957 14.7431 12.1957 14.7544 12.1957 14.7657C12.1957 14.7772 12.1957 14.7885 12.1957 14.8C12.1957 14.8115 12.1957 14.823 12.1957 14.8344C12.1957 14.8459 12.1957 14.8574 12.1957 14.8689C12.1957 14.8803 12.1957 14.892 12.1957 14.9037C12.1957 14.9151 12.1957 14.9268 12.1957 14.9384C12.1957 14.9501 12.1957 14.9617 12.1957 14.9734C12.1957 14.9852 12.1957 14.9969 12.1957 15.0087C12.1957 15.0203 12.1957 15.0322 12.1957 15.044C12.1957 15.0558 12.1957 15.0677 12.1957 15.0795C12.1957 15.0915 12.1957 15.1033 12.1957 15.1153C12.1957 15.1271 12.1957 15.1391 12.1957 15.1511C12.1957 15.1631 12.1957 15.1751 12.1957 15.1871C12.1957 15.1991 12.1957 15.2111 12.1957 15.2233C12.1957 15.2353 12.1957 15.2475 12.1957 15.2597C12.1957 15.2718 12.1957 15.284 12.1957 15.2962C12.1957 15.3083 12.1957 15.3205 12.1957 15.3329C12.1957 15.345 12.1957 15.3574 12.1957 15.3697C12.1957 15.3821 12.1957 15.3944 12.1957 15.4068C12.1957 15.4191 12.1957 15.4315 12.1957 15.444C12.1957 15.4563 12.1957 15.4689 12.1957 15.4814C12.1957 15.4937 12.1957 15.5063 12.1957 15.519C12.1957 15.5315 12.1957 15.544 12.1957 15.5565C12.1957 15.5692 12.1957 15.5817 12.1957 15.5944C12.1957 15.6071 12.1957 15.6198 12.1957 15.6325C12.1957 15.6452 12.1957 15.6579 12.1957 15.6708C12.1957 15.6835 12.1957 15.6963 12.1957 15.7092C12.1957 15.7219 12.1957 15.7348 12.1957 15.7477C12.1957 15.7607 12.1957 15.7736 12.1957 15.7864C12.1957 15.7995 12.1957 15.8123 12.1957 15.8254C12.1957 15.8384 12.1957 15.8515 12.1957 15.8645C12.1957 15.8776 12.1957 15.8906 12.1957 15.9038C12.1957 15.9169 12.1957 15.9301 12.1957 15.9433C12.1957 15.9563 12.1957 15.9696 12.1957 15.9828C12.1957 15.996 12.1957 16.0094 12.1957 16.0226C12.1957 16.036 12.1957 16.0492 12.1957 16.0626C12.1957 16.076 12.1957 16.0894 12.1957 16.1028C12.1957 16.1162 12.1957 16.1296 12.1957 16.1431C12.1957 16.1565 12.1957 16.1701 12.1957 16.1837C12.1957 16.197 12.1957 16.2106 12.1957 16.2243C12.1957 16.2379 12.1957 16.2515 12.1957 16.2652C12.1957 16.2788 12.1957 16.2925 12.1957 16.3061C12.1957 16.3198 12.1957 16.3336 12.1957 16.3473C12.1957 16.3612 12.1957 16.375 12.1957 16.3889C12.1957 16.4026 12.1957 16.4165 12.1957 16.4304C12.1957 16.4442 12.1957 16.4581 12.1957 16.4722C12.1957 16.4861 12.1957 16.5 12.1957 16.5141C12.1957 16.528 12.1957 16.5421 12.1957 16.5562C12.1957 16.5703 12.1957 16.5843 12.1957 16.5984C12.1957 16.6125 12.1957 16.6268 12.1957 16.6409C12.1957 16.6551 12.1957 16.6694 12.1957 16.6837C12.1957 16.6979 12.1957 16.7122 12.1957 16.7264C12.1957 16.7407 12.1957 16.7551 12.1957 16.7694C12.1957 16.7838 12.1957 16.7983 12.1957 16.8127C12.1957 16.8271 12.1957 16.8416 12.1957 16.856C12.1957 16.8706 12.1957 16.885 12.1957 16.8997C12.1957 16.9143 12.1957 16.9289 12.1957 16.9435C12.1957 16.9581 12.1957 16.9727 12.1957 16.9873C12.1957 17.0021 12.1957 17.0167 12.1957 17.0315C12.1957 17.0463 12.1957 17.061 12.1957 17.0758C12.1957 17.0906 12.1957 17.1054 12.1957 17.1203C12.1957 17.1351 12.1957 17.1501 12.1957 17.165C12.1957 17.18 12.1957 17.195 12.1957 17.2099C12.1957 17.2249 12.1957 17.2398 12.1957 17.255C12.1957 17.2699 12.1957 17.285 12.1957 17.3002C12.1957 17.3153 12.1957 17.3304 12.1957 17.3456C12.1957 17.3609 12.1957 17.376 12.1957 17.3913C12.1957 17.4064 12.1957 17.4217 12.1957 17.437C12.1957 17.4523 12.1957 17.4677 12.1957 17.4831C12.1957 17.4984 12.1957 17.5137 12.1957 17.5292C12.1957 17.5447 12.1957 17.5602 12.1957 17.5757C12.1957 17.5911 12.1957 17.6066 12.1957 17.6223C12.1957 17.6377 12.1957 17.6534 12.1957 17.669C12.1957 17.6845 12.1957 17.7002 12.1957 17.716C12.1957 17.7317 12.1957 17.7473 12.1957 17.7631C12.1957 17.7788 12.1957 17.7946 12.1957 17.8104C12.1957 17.8263 12.1957 17.8421 12.1957 17.8579C12.1957 17.8737 12.1957 17.8897 12.1957 17.9056C12.1957 17.9216 12.1957 17.9376 12.1957 17.9536C12.1957 17.9696 12.1957 17.9856 12.1957 18.0017C12.1957 18.0177 12.1957 18.0339 12.1957 18.0499C12.1957 18.0661 12.1957 18.0823 12.1957 18.0984C12.1957 18.1146 12.1957 18.131 12.1957 18.1471C12.1957 18.1635 12.1957 18.1797 12.1957 18.196C12.1957 18.2123 12.1957 18.2287 12.1957 18.245C12.1957 18.2616 12.1957 18.2779 12.1957 18.2944C12.1957 18.3108 12.1957 18.3273 12.1957 18.3438C12.1957 18.3603 12.1957 18.3769 12.1957 18.3936C12.1957 18.4101 12.1957 18.4268 12.1957 18.4433C12.1957 18.46 12.1957 18.4767 12.1957 18.4934C12.1957 18.5101 12.1957 18.527 12.1957 18.5437C12.1957 18.5605 12.1957 18.5772 12.1957 18.5941C12.1957 18.611 12.1957 18.6278 12.1957 18.6449C12.1957 18.6617 12.1957 18.6786 12.1957 18.6957H14.8043C14.8043 18.6786 14.8043 18.6617 14.8043 18.6449C14.8043 18.6278 14.8043 18.611 14.8043 18.5941C14.8043 18.5772 14.8043 18.5605 14.8043 18.5437C14.8043 18.527 14.8043 18.5101 14.8043 18.4934C14.8043 18.4767 14.8043 18.46 14.8043 18.4433C14.8043 18.4268 14.8043 18.4101 14.8043 18.3936C14.8043 18.3769 14.8043 18.3603 14.8043 18.3438C14.8043 18.3273 14.8043 18.3108 14.8043 18.2944C14.8043 18.2779 14.8043 18.2616 14.8043 18.245C14.8043 18.2287 14.8043 18.2123 14.8043 18.196C14.8043 18.1797 14.8043 18.1635 14.8043 18.1471C14.8043 18.131 14.8043 18.1146 14.8043 18.0984C14.8043 18.0823 14.8043 18.0661 14.8043 18.0499C14.8043 18.0339 14.8043 18.0177 14.8043 18.0017C14.8043 17.9856 14.8043 17.9696 14.8043 17.9536C14.8043 17.9376 14.8043 17.9216 14.8043 17.9056C14.8043 17.8897 14.8043 17.8737 14.8043 17.8579C14.8043 17.8421 14.8043 17.8263 14.8043 17.8104C14.8043 17.7946 14.8043 17.7788 14.8043 17.7631C14.8043 17.7473 14.8043 17.7317 14.8043 17.716C14.8043 17.7002 14.8043 17.6845 14.8043 17.669C14.8043 17.6534 14.8043 17.6377 14.8043 17.6223C14.8043 17.6066 14.8043 17.5911 14.8043 17.5757C14.8043 17.5602 14.8043 17.5447 14.8043 17.5292C14.8043 17.5137 14.8043 17.4984 14.8043 17.4831C14.8043 17.4677 14.8043 17.4523 14.8043 17.437C14.8043 17.4217 14.8043 17.4064 14.8043 17.3913C14.8043 17.376 14.8043 17.3609 14.8043 17.3456C14.8043 17.3304 14.8043 17.3153 14.8043 17.3002C14.8043 17.285 14.8043 17.2699 14.8043 17.255C14.8043 17.2398 14.8043 17.2249 14.8043 17.2099C14.8043 17.195 14.8043 17.18 14.8043 17.165C14.8043 17.1501 14.8043 17.1351 14.8043 17.1203C14.8043 17.1054 14.8043 17.0906 14.8043 17.0758C14.8043 17.061 14.8043 17.0463 14.8043 17.0315C14.8043 17.0167 14.8043 17.0021 14.8043 16.9873C14.8043 16.9727 14.8043 16.9581 14.8043 16.9435C14.8043 16.9289 14.8043 16.9143 14.8043 16.8997C14.8043 16.885 14.8043 16.8706 14.8043 16.856C14.8043 16.8416 14.8043 16.8271 14.8043 16.8127C14.8043 16.7983 14.8043 16.7838 14.8043 16.7694C14.8043 16.7551 14.8043 16.7407 14.8043 16.7264C14.8043 16.7122 14.8043 16.6979 14.8043 16.6837C14.8043 16.6694 14.8043 16.6551 14.8043 16.6409C14.8043 16.6268 14.8043 16.6125 14.8043 16.5984C14.8043 16.5843 14.8043 16.5703 14.8043 16.5562C14.8043 16.5421 14.8043 16.528 14.8043 16.5141C14.8043 16.5 14.8043 16.4861 14.8043 16.4722C14.8043 16.4581 14.8043 16.4442 14.8043 16.4304C14.8043 16.4165 14.8043 16.4026 14.8043 16.3889C14.8043 16.375 14.8043 16.3612 14.8043 16.3473C14.8043 16.3336 14.8043 16.3198 14.8043 16.3061C14.8043 16.2925 14.8043 16.2788 14.8043 16.2652C14.8043 16.2515 14.8043 16.2379 14.8043 16.2243C14.8043 16.2106 14.8043 16.197 14.8043 16.1837C14.8043 16.1701 14.8043 16.1565 14.8043 16.1431C14.8043 16.1296 14.8043 16.1162 14.8043 16.1028C14.8043 16.0894 14.8043 16.076 14.8043 16.0626C14.8043 16.0492 14.8043 16.036 14.8043 16.0226C14.8043 16.0094 14.8043 15.996 14.8043 15.9828C14.8043 15.9696 14.8043 15.9563 14.8043 15.9433C14.8043 15.9301 14.8043 15.9169 14.8043 15.9038C14.8043 15.8906 14.8043 15.8776 14.8043 15.8645C14.8043 15.8515 14.8043 15.8384 14.8043 15.8254C14.8043 15.8123 14.8043 15.7995 14.8043 15.7864C14.8043 15.7736 14.8043 15.7607 14.8043 15.7477C14.8043 15.7348 14.8043 15.7219 14.8043 15.7092C14.8043 15.6963 14.8043 15.6835 14.8043 15.6708C14.8043 15.6579 14.8043 15.6452 14.8043 15.6325C14.8043 15.6198 14.8043 15.6071 14.8043 15.5944C14.8043 15.5817 14.8043 15.5692 14.8043 15.5565C14.8043 15.544 14.8043 15.5315 14.8043 15.519C14.8043 15.5063 14.8043 15.4937 14.8043 15.4814C14.8043 15.4689 14.8043 15.4563 14.8043 15.444C14.8043 15.4315 14.8043 15.4191 14.8043 15.4068C14.8043 15.3944 14.8043 15.3821 14.8043 15.3697C14.8043 15.3574 14.8043 15.345 14.8043 15.3329C14.8043 15.3205 14.8043 15.3083 14.8043 15.2962C14.8043 15.284 14.8043 15.2718 14.8043 15.2597C14.8043 15.2475 14.8043 15.2353 14.8043 15.2233C14.8043 15.2111 14.8043 15.1991 14.8043 15.1871C14.8043 15.1751 14.8043 15.1631 14.8043 15.1511C14.8043 15.1391 14.8043 15.1271 14.8043 15.1153C14.8043 15.1033 14.8043 15.0915 14.8043 15.0795C14.8043 15.0677 14.8043 15.0558 14.8043 15.044C14.8043 15.0322 14.8043 15.0203 14.8043 15.0087C14.8043 14.9969 14.8043 14.9852 14.8043 14.9734C14.8043 14.9617 14.8043 14.9501 14.8043 14.9384C14.8043 14.9268 14.8043 14.9151 14.8043 14.9037C14.8043 14.892 14.8043 14.8803 14.8043 14.8689C14.8043 14.8574 14.8043 14.8459 14.8043 14.8344C14.8043 14.823 14.8043 14.8115 14.8043 14.8C14.8043 14.7885 14.8043 14.7772 14.8043 14.7657C14.8043 14.7544 14.8043 14.7431 14.8043 14.7318C14.8043 14.7203 14.8043 14.709 14.8043 14.6979C14.8043 14.6866 14.8043 14.6753 14.8043 14.6642C14.8043 14.6529 14.8043 14.6417 14.8043 14.6306C14.8043 14.6195 14.8043 14.6083 14.8043 14.5972C14.8043 14.5861 14.8043 14.575 14.8043 14.564C14.8043 14.5529 14.8043 14.5419 14.8043 14.531C14.8043 14.5198 14.8043 14.5089 14.8043 14.4979C14.8043 14.487 14.8043 14.4762 14.8043 14.4652C14.8043 14.4543 14.8043 14.4435 14.8043 14.4327C14.8043 14.4217 14.8043 14.411 14.8043 14.4002C14.8043 14.3894 14.8043 14.3786 14.8043 14.368C14.8043 14.3572 14.8043 14.3464 14.8043 14.3358C14.8043 14.3252 14.8043 14.3144 14.8043 14.3038C14.8043 14.2932 14.8043 14.2826 14.8043 14.272C14.8043 14.2614 14.8043 14.251 14.8043 14.2403C14.8043 14.2299 14.8043 14.2193 14.8043 14.2089C14.8043 14.1984 14.8043 14.188 14.8043 14.1776C14.8043 14.1671 14.8043 14.1567 14.8043 14.1464C14.8043 14.136 14.8043 14.1257 14.8043 14.1153C14.8043 14.105 14.8043 14.0948 14.8043 14.0845C14.8043 14.0743 14.8043 14.064 14.8043 14.0537C14.8043 14.0437 14.8043 14.0334 14.8043 14.0233C14.8043 14.013 14.8043 14.003 14.8043 13.9929C14.8043 13.9828 14.8043 13.9727 14.8043 13.9626C14.8043 13.9525 14.8043 13.9424 14.8043 13.9325C14.8043 13.9224 14.8043 13.9125 14.8043 13.9026C14.8043 13.8927 14.8043 13.8826 14.8043 13.8727C14.8043 13.863 14.8043 13.853 14.8043 13.8431C14.8043 13.8332 14.8043 13.8235 14.8043 13.8137C14.8043 13.8038 14.8043 13.7941 14.8043 13.7843C14.8043 13.7746 14.8043 13.7649 14.8043 13.7551C14.8043 13.7454 14.8043 13.7358 14.8043 13.7261C14.8043 13.7165 14.8043 13.7068 14.8043 13.6972C14.8043 13.6877 14.8043 13.6781 14.8043 13.6685C14.8043 13.659 14.8043 13.6494 14.8043 13.6398C14.8043 13.6304 14.8043 13.6209 14.8043 13.6115C14.8043 13.6021 14.8043 13.5925 14.8043 13.5831C14.8043 13.5737 14.8043 13.5643 14.8043 13.555C14.8043 13.5457 14.8043 13.5363 14.8043 13.527C14.8043 13.5177 14.8043 13.5085 14.8043 13.4991C14.8043 13.4899 14.8043 13.4807 14.8043 13.4715C14.8043 13.4623 14.8043 13.453 14.8043 13.444C14.8043 13.4348 14.8043 13.4256 14.8043 13.4165C14.8043 13.4075 14.8043 13.3983 14.8043 13.3892C14.8043 13.3802 14.8043 13.3711 14.8043 13.3621C14.8043 13.3532 14.8043 13.3442 14.8043 13.3351C14.8043 13.3263 14.8043 13.3172 14.8043 13.3083C14.8043 13.2995 14.8043 13.2906 14.8043 13.2817C14.8043 13.2729 14.8043 13.264 14.8043 13.2551C14.8043 13.2463 14.8043 13.2376 14.8043 13.2287C14.8043 13.22 14.8043 13.2113 14.8043 13.2024C14.8043 13.1937 14.8043 13.185 14.8043 13.1763C14.8043 13.1677 14.8043 13.1591 14.8043 13.1504C14.8043 13.1417 14.8043 13.1332 14.8043 13.1247C14.8043 13.116 14.8043 13.1075 14.8043 13.099C14.8043 13.0904 14.8043 13.0819 14.8043 13.0734C14.8043 13.0649 14.8043 13.0565 14.8043 13.048C14.8043 13.0395 14.8043 13.0311 14.8043 13.0228C14.8043 13.0143 14.8043 13.0059 14.8043 12.9976C14.8043 12.9892 14.8043 12.9809 14.8043 12.9727C14.8043 12.9643 14.8043 12.956 14.8043 12.9478C14.8043 12.9395 14.8043 12.9313 14.8043 12.9231C14.8043 12.915 14.8043 12.9066 14.8043 12.8986C14.8043 12.8904 14.8043 12.8823 14.8043 12.8741C14.8043 12.8659 14.8043 12.8579 14.8043 12.8497C14.8043 12.8417 14.8043 12.8337 14.8043 12.8257C14.8043 12.8176 14.8043 12.8096 14.8043 12.8016C14.8043 12.7937 14.8043 12.7857 14.8043 12.7777C14.8043 12.7699 14.8043 12.7619 14.8043 12.7541C14.8043 12.7461 14.8043 12.7383 14.8043 12.7304C14.8043 12.7226 14.8043 12.7148 14.8043 12.707C14.8043 12.6991 14.8043 12.6913 14.8043 12.6837C14.8043 12.6758 14.8043 12.6682 14.8043 12.6603C14.8043 12.6527 14.8043 12.645 14.8043 12.6374C14.8043 12.6297 14.8043 12.6221 14.8043 12.6144C14.8043 12.6068 14.8043 12.5991 14.8043 12.5917C14.8043 12.584 14.8043 12.5765 14.8043 12.5689C14.8043 12.5614 14.8043 12.5539 14.8043 12.5464C14.8043 12.539 14.8043 12.5315 14.8043 12.524C14.8043 12.5165 14.8043 12.5092 14.8043 12.5017C14.8043 12.4943 14.8043 12.487 14.8043 12.4797C14.8043 12.4722 14.8043 12.4649 14.8043 12.4576C14.8043 12.4503 14.8043 12.443 14.8043 12.4357C14.8043 12.4285 14.8043 12.4212 14.8043 12.4139C14.8043 12.4068 14.8043 12.3995 14.8043 12.3923C14.8043 12.3852 14.8043 12.3781 14.8043 12.3708C14.8043 12.3637 14.8043 12.3565 14.8043 12.3496C14.8043 12.3424 14.8043 12.3353 14.8043 12.3283C14.8043 12.3212 14.8043 12.3143 14.8043 12.3071C14.8043 12.3002 14.8043 12.2932 14.8043 12.2863C14.8043 12.2793 14.8043 12.2723 14.8043 12.2654C14.8043 12.2584 14.8043 12.2515 14.8043 12.2447C14.8043 12.2377 14.8043 12.231 14.8043 12.224C14.8043 12.2172 14.8043 12.2104 14.8043 12.2037C14.8043 12.1967 14.8043 12.1899 14.8043 12.1833C14.8043 12.1765 14.8043 12.1697 14.8043 12.163C14.8043 12.1563 14.8043 12.1496 14.8043 12.143C14.8043 12.1362 14.8043 12.1296 14.8043 12.123C14.8043 12.1163 14.8043 12.1097 14.8043 12.1031C14.8043 12.0965 14.8043 12.0899 14.8043 12.0835C14.8043 12.0769 14.8043 12.0703 14.8043 12.0638C14.8043 12.0572 14.8043 12.0508 14.8043 12.0443C14.8043 12.0379 14.8043 12.0315 14.8043 12.025C14.8043 12.0186 14.8043 12.0122 14.8043 12.0057C14.8043 11.9993 14.8043 11.993 14.8043 11.9866C14.8043 11.9803 14.8043 11.9739 14.8043 11.9677C14.8043 11.9614 14.8043 11.9551 14.8043 11.9489C14.8043 11.9426 14.8043 11.9363 14.8043 11.9301C14.8043 11.9238 14.8043 11.9177 14.8043 11.9115C14.8043 11.9052 14.8043 11.8991 14.8043 11.893C14.8043 11.8868 14.8043 11.8807 14.8043 11.8746C14.8043 11.8685 14.8043 11.8624 14.8043 11.8563C14.8043 11.8503 14.8043 11.8442 14.8043 11.8383C14.8043 11.8322 14.8043 11.8261 14.8043 11.8202C14.8043 11.8143 14.8043 11.8082 14.8043 11.8023C14.8043 11.7963 14.8043 11.7904 14.8043 11.7845C14.8043 11.7786 14.8043 11.7727 14.8043 11.7668C14.8043 11.7609 14.8043 11.7551 14.8043 11.7492C14.8043 11.7435 14.8043 11.7376 14.8043 11.7318C14.8043 11.7261 14.8043 11.7203 14.8043 11.7144C14.8043 11.7087 14.8043 11.703 14.8043 11.6974C14.8043 11.6917 14.8043 11.6859 14.8043 11.6802C14.8043 11.6746 14.8043 11.6689 14.8043 11.6633C14.8043 11.6576 14.8043 11.652 14.8043 11.6464C14.8043 11.6409 14.8043 11.6351 14.8043 11.6297C14.8043 11.6242 14.8043 11.6186 14.8043 11.613C14.8043 11.6075 14.8043 11.6019 14.8043 11.5965C14.8043 11.591 14.8043 11.5856 14.8043 11.5802C14.8043 11.5746 14.8043 11.5692 14.8043 11.5638C14.8043 11.5584 14.8043 11.553 14.8043 11.5477C14.8043 11.5423 14.8043 11.5369 14.8043 11.5317C14.8043 11.5263 14.8043 11.5209 14.8043 11.5157C14.8043 11.5103 14.8043 11.505 14.8043 11.4998C14.8043 11.4944 14.8043 11.4892 14.8043 11.484C14.8043 11.4788 14.8043 11.4736 14.8043 11.4683C14.8043 11.4633 14.8043 11.4581 14.8043 11.4529C14.8043 11.4478 14.8043 11.4426 14.8043 11.4376C14.8043 11.4323 14.8043 11.4273 14.8043 11.4223C14.8043 11.4172 14.8043 11.412 14.8043 11.407C14.8043 11.4019 14.8043 11.397 14.8043 11.392C14.8043 11.387 14.8043 11.3819 14.8043 11.377C14.8043 11.372 14.8043 11.3671 14.8043 11.3621C14.8043 11.3572 14.8043 11.3523 14.8043 11.3473C14.8043 11.3424 14.8043 11.3376 14.8043 11.3327C14.8043 11.3278 14.8043 11.323 14.8043 11.3183C14.8043 11.3134 14.8043 11.3085 14.8043 11.3038C14.8043 11.299 14.8043 11.2943 14.8043 11.2894C14.8043 11.2847 14.8043 11.28 14.8043 11.2751C14.8043 11.2704 14.8043 11.2657 14.8043 11.261C14.8043 11.2563 14.8043 11.2518 14.8043 11.2471C14.8043 11.2424 14.8043 11.2377 14.8043 11.2332C14.8043 11.2285 14.8043 11.224 14.8043 11.2193C14.8043 11.2148 14.8043 11.2103 14.8043 11.2057C14.8043 11.201 14.8043 11.1965 14.8043 11.192C14.8043 11.1875 14.8043 11.1831 14.8043 11.1786C14.8043 11.1741 14.8043 11.1696 14.8043 11.1652C14.8043 11.1607 14.8043 11.1563 14.8043 11.1518C14.8043 11.1475 14.8043 11.1431 14.8043 11.1388C14.8043 11.1343 14.8043 11.1299 14.8043 11.1256C14.8043 11.1212 14.8043 11.1169 14.8043 11.1127C14.8043 11.1083 14.8043 11.104 14.8043 11.0998C14.8043 11.0955 14.8043 11.0911 14.8043 11.087C14.8043 11.0828 14.8043 11.0784 14.8043 11.0743C14.8043 11.0701 14.8043 11.0659 14.8043 11.0617C14.8043 11.0576 14.8043 11.0534 14.8043 11.0492C14.8043 11.045 14.8043 11.0409 14.8043 11.0369C14.8043 11.0327 14.8043 11.0285 14.8043 11.0245C14.8043 11.0203 14.8043 11.0163 14.8043 11.0123C14.8043 11.0082 14.8043 11.0042 14.8043 11.0002C14.8043 10.9962 14.8043 10.9922 14.8043 10.9882C14.8043 10.9842 14.8043 10.9802 14.8043 10.9763C14.8043 10.9723 14.8043 10.9683 14.8043 10.9645C14.8043 10.9605 14.8043 10.9567 14.8043 10.9527C14.8043 10.9489 14.8043 10.945 14.8043 10.9412C14.8043 10.9372 14.8043 10.9334 14.8043 10.9296C14.8043 10.9257 14.8043 10.9219 14.8043 10.9183C14.8043 10.9144 14.8043 10.9106 14.8043 10.9068C14.8043 10.9031 14.8043 10.8993 14.8043 10.8957C14.8043 10.8918 14.8043 10.8882 14.8043 10.8845C14.8043 10.8807 14.8043 10.877 14.8043 10.8734C14.8043 10.8697 14.8043 10.8661 14.8043 10.8624C14.8043 10.8588 14.8043 10.8551 14.8043 10.8517C14.8043 10.848 14.8043 10.8443 14.8043 10.8409C14.8043 10.8372 14.8043 10.8337 14.8043 10.8301C14.8043 10.8266 14.8043 10.823 14.8043 10.8195C14.8043 10.816 14.8043 10.8125 14.8043 10.809C14.8043 10.8056 14.8043 10.8021 14.8043 10.7986C14.8043 10.7951 14.8043 10.7917 14.8043 10.7883C14.8043 10.7849 14.8043 10.7814 14.8043 10.7781C14.8043 10.7746 14.8043 10.7713 14.8043 10.7678C14.8043 10.7645 14.8043 10.7612 14.8043 10.7579C14.8043 10.7544 14.8043 10.7511 14.8043 10.7478C14.8043 10.7445 14.8043 10.7412 14.8043 10.7379C14.8043 10.7346 14.8043 10.7315 14.8043 10.7282C14.8043 10.7249 14.8043 10.7217 14.8043 10.7184C14.8043 10.7153 14.8043 10.712 14.8043 10.7089C14.8043 10.7056 14.8043 10.7024 14.8043 10.6993C14.8043 10.6962 14.8043 10.693 14.8043 10.6899C14.8043 10.6868 14.8043 10.6837 14.8043 10.6805C14.8043 10.6774 14.8043 10.6743 14.8043 10.6711C14.8043 10.6682 14.8043 10.665 14.8043 10.6621C14.8043 10.659 14.8043 10.656 14.8043 10.6529C14.8043 10.6499 14.8043 10.647 14.8043 10.6438C14.8043 10.6409 14.8043 10.6379 14.8043 10.635C14.8043 10.632 14.8043 10.629 14.8043 10.6261C14.8043 10.6231 14.8043 10.6202 14.8043 10.6174C14.8043 10.6144 14.8043 10.6115 14.8043 10.6087C14.8043 10.6057 14.8043 10.6028 14.8043 10.6C14.8043 10.5972 14.8043 10.5943 14.8043 10.5915C14.8043 10.5887 14.8043 10.5857 14.8043 10.583C14.8043 10.5802 14.8043 10.5774 14.8043 10.5746C14.8043 10.5718 14.8043 10.569 14.8043 10.5664C14.8043 10.5637 14.8043 10.5609 14.8043 10.5581C14.8043 10.5555 14.8043 10.5527 14.8043 10.5501C14.8043 10.5473 14.8043 10.5447 14.8043 10.5419C14.8043 10.5393 14.8043 10.5367 14.8043 10.5341C14.8043 10.5313 14.8043 10.5287 14.8043 10.5261C14.8043 10.5235 14.8043 10.5209 14.8043 10.5183C14.8043 10.5157 14.8043 10.5132 14.8043 10.5106C14.8043 10.508 14.8043 10.5054 14.8043 10.503C14.8043 10.5003 14.8043 10.4979 14.8043 10.4953C14.8043 10.4929 14.8043 10.4903 14.8043 10.4878C14.8043 10.4854 14.8043 10.4828 14.8043 10.4803C14.8043 10.4779 14.8043 10.4755 14.8043 10.473C14.8043 10.4706 14.8043 10.4682 14.8043 10.4657C14.8043 10.4633 14.8043 10.4609 14.8043 10.4586C14.8043 10.4562 14.8043 10.4537 14.8043 10.4515C14.8043 10.449 14.8043 10.4468 14.8043 10.4443C14.8043 10.4421 14.8043 10.4397 14.8043 10.4374C14.8043 10.4351 14.8043 10.4327 14.8043 10.4304C14.8043 10.4282 14.8043 10.4259 14.8043 10.4237C14.8043 10.4214 14.8043 10.4191 14.8043 10.4169C14.8043 10.4146 14.8043 10.4123 14.8043 10.4103C14.8043 10.408 14.8043 10.4057 14.8043 10.4037C14.8043 10.4014 14.8043 10.3993 14.8043 10.397C14.8043 10.395 14.8043 10.3927 14.8043 10.3906C14.8043 10.3883 14.8043 10.3863 14.8043 10.3842C14.8043 10.3821 14.8043 10.38 14.8043 10.3779C14.8043 10.3758 14.8043 10.3737 14.8043 10.3717C14.8043 10.3696 14.8043 10.3675 14.8043 10.3654C14.8043 10.3633 14.8043 10.3612 14.8043 10.3593C14.8043 10.3572 14.8043 10.3551 14.8043 10.3532C14.8043 10.3511 14.8043 10.3492 14.8043 10.3473C14.8043 10.3452 14.8043 10.3433 14.8043 10.3412C14.8043 10.3393 14.8043 10.3374 14.8043 10.3355C14.8043 10.3336 14.8043 10.3317 14.8043 10.3297C14.8043 10.3278 14.8043 10.3259 14.8043 10.324C14.8043 10.3221 14.8043 10.3202 14.8043 10.3183C14.8043 10.3163 14.8043 10.3146 14.8043 10.3127C14.8043 10.3108 14.8043 10.309 14.8043 10.3071C14.8043 10.3054 14.8043 10.3035 14.8043 10.3017C14.8043 10.3 14.8043 10.2981 14.8043 10.2963C14.8043 10.2946 14.8043 10.2929 14.8043 10.291C14.8043 10.2892 14.8043 10.2875 14.8043 10.2857C14.8043 10.284 14.8043 10.2823 14.8043 10.2805C14.8043 10.2788 14.8043 10.2772 14.8043 10.2755C14.8043 10.2737 14.8043 10.272 14.8043 10.2704C14.8043 10.2687 14.8043 10.267 14.8043 10.2654C14.8043 10.2637 14.8043 10.2621 14.8043 10.2603C14.8043 10.2588 14.8043 10.2572 14.8043 10.2555C14.8043 10.2539 14.8043 10.2523 14.8043 10.2508C14.8043 10.249 14.8043 10.2475 14.8043 10.2459C14.8043 10.2443 14.8043 10.2428 14.8043 10.2412C14.8043 10.2397 14.8043 10.2381 14.8043 10.2367C14.8043 10.2351 14.8043 10.2336 14.8043 10.232C14.8043 10.2306 14.8043 10.229 14.8043 10.2275C14.8043 10.2261 14.8043 10.2245 14.8043 10.2231C14.8043 10.2216 14.8043 10.2202 14.8043 10.2186C14.8043 10.2172 14.8043 10.2158 14.8043 10.2143C14.8043 10.2129 14.8043 10.2115 14.8043 10.2101C14.8043 10.2087 14.8043 10.2071 14.8043 10.2057C14.8043 10.2043 14.8043 10.203 14.8043 10.2016C14.8043 10.2002 14.8043 10.199 14.8043 10.1976C14.8043 10.1962 14.8043 10.1948 14.8043 10.1934C14.8043 10.1922 14.8043 10.1908 14.8043 10.1894C14.8043 10.1882 14.8043 10.1868 14.8043 10.1856C14.8043 10.1842 14.8043 10.183 14.8043 10.1816C14.8043 10.1803 14.8043 10.1791 14.8043 10.1777C14.8043 10.1765 14.8043 10.1753 14.8043 10.1739C14.8043 10.1727 14.8043 10.1715 14.8043 10.1703C14.8043 10.169 14.8043 10.1678 14.8043 10.1666C14.8043 10.1654 14.8043 10.1642 14.8043 10.163C14.8043 10.1617 14.8043 10.1605 14.8043 10.1595C14.8043 10.1583 14.8043 10.157 14.8043 10.1558C14.8043 10.1548 14.8043 10.1536 14.8043 10.1523C14.8043 10.1513 14.8043 10.1501 14.8043 10.149C14.8043 10.1478 14.8043 10.1468 14.8043 10.1456C14.8043 10.1445 14.8043 10.1435 14.8043 10.1423C14.8043 10.1412 14.8043 10.1402 14.8043 10.1391C14.8043 10.1381 14.8043 10.1369 14.8043 10.1358C14.8043 10.1348 14.8043 10.1337 14.8043 10.1327C14.8043 10.1317 14.8043 10.1306 14.8043 10.1296C14.8043 10.1285 14.8043 10.1275 14.8043 10.1266C14.8043 10.1256 14.8043 10.1245 14.8043 10.1235C14.8043 10.1226 14.8043 10.1216 14.8043 10.1205C14.8043 10.1197 14.8043 10.1186 14.8043 10.1176C14.8043 10.1167 14.8043 10.1157 14.8043 10.1148C14.8043 10.1139 14.8043 10.1129 14.8043 10.112C14.8043 10.111 14.8043 10.1101 14.8043 10.1092C14.8043 10.1082 14.8043 10.1073 14.8043 10.1064C14.8043 10.1056 14.8043 10.1047 14.8043 10.1038C14.8043 10.103 14.8043 10.1019 14.8043 10.101C14.8043 10.1002 14.8043 10.0993 14.8043 10.0986C14.8043 10.0977 14.8043 10.0969 14.8043 10.096C14.8043 10.0951 14.8043 10.0943 14.8043 10.0936C14.8043 10.0927 14.8043 10.0918 14.8043 10.091C14.8043 10.0903 14.8043 10.0894 14.8043 10.0885C14.8043 10.0878 14.8043 10.087 14.8043 10.0863C14.8043 10.0854 14.8043 10.0847 14.8043 10.0838C14.8043 10.0831 14.8043 10.0824 14.8043 10.0816C14.8043 10.0809 14.8043 10.0802 14.8043 10.0793C14.8043 10.0786 14.8043 10.0779 14.8043 10.0772C14.8043 10.0765 14.8043 10.0757 14.8043 10.075C14.8043 10.0743 14.8043 10.0736 14.8043 10.0729C14.8043 10.0722 14.8043 10.0715 14.8043 10.0708C14.8043 10.0701 14.8043 10.0694 14.8043 10.0687C14.8043 10.068 14.8043 10.0675 14.8043 10.0668C14.8043 10.0661 14.8043 10.0654 14.8043 10.0649C14.8043 10.0642 14.8043 10.0635 14.8043 10.0628C14.8043 10.0623 14.8043 10.0616 14.8043 10.061C14.8043 10.0603 14.8043 10.0598 14.8043 10.0591C14.8043 10.0584 14.8043 10.0579 14.8043 10.0574C14.8043 10.0567 14.8043 10.0562 14.8043 10.0555C14.8043 10.055 14.8043 10.0544 14.8043 10.0537C14.8043 10.0543 14.8043 10.0532 14.8043 10.0537C14.8043 10.053 14.8043 10.051 14.8043 10.0504C14.8043 10.051 14.8043 10.0499 14.8043 10.0504C14.8043 10.0499 14.8043 10.0478 14.8043 10.0473C14.8043 10.0478 14.8043 10.0468 14.8043 10.0473C14.8043 10.0468 14.8043 10.0447 14.8043 10.0442C14.8043 10.0447 14.8043 10.0437 14.8043 10.0442C14.8043 10.0437 14.8043 10.0417 14.8043 10.0412C14.8043 10.0416 14.8043 10.0407 14.8043 10.0412C14.8043 10.0407 14.8043 10.0388 14.8043 10.0384C14.8043 10.039 14.8043 10.0379 14.8043 10.0384C14.8043 10.0379 14.8043 10.0362 14.8043 10.0357C14.8043 10.036 14.8043 10.0353 14.8043 10.0357C14.8043 10.0353 14.8043 10.0336 14.8043 10.0332C14.8043 10.0336 14.8043 10.0327 14.8043 10.0332C14.8043 10.0327 14.8043 10.0311 14.8043 10.0308C14.8043 10.0311 14.8043 10.0304 14.8043 10.0308C14.8043 10.0304 14.8043 10.0289 14.8043 10.0285C14.8043 10.0289 14.8043 10.028 14.8043 10.0285C14.8043 10.0282 14.8043 10.0266 14.8043 10.0263C14.8043 10.0266 14.8043 10.0259 14.8043 10.0263C14.8043 10.0259 14.8043 10.0245 14.8043 10.0242C14.8043 10.0245 14.8043 10.0238 14.8043 10.0242C14.8043 10.0238 14.8043 10.0226 14.8043 10.0223C14.8043 10.0226 14.8043 10.0219 14.8043 10.0223C14.8043 10.0221 14.8043 10.0207 14.8043 10.0203C14.8043 10.02 14.8043 10.0181 14.8043 10.0177C14.8043 10.0176 14.8043 10.0157 14.8043 10.0155C14.8043 10.0153 14.8043 10.0136 14.8043 10.0134C14.8043 10.0132 14.8043 10.0117 14.8043 10.0113C14.8043 10.0111 14.8043 10.0099 14.8043 10.0096C14.8043 10.0094 14.8043 10.0078 14.8043 10.0077C14.8043 10.0078 14.8043 10.0075 14.8043 10.0077C14.8043 10.0075 14.8043 10.0061 14.8043 10.0059C14.8043 10.0057 14.8043 10.004 14.8043 10.0038C14.8043 10.0038 14.8043 10.0023 14.8043 10.0021C14.8043 10.0019 14.8043 10 14.8043 10H13.5ZM14.8043 10V1.30435H12.1957V10H14.8043Z"
      fill="white"
    />
  </Svg>
);

const ChevronUpIcon = (props) => (
  <Svg
    width={12}
    height={20}
    viewBox="0 0 12 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M1.18338 0.170116C0.894591 -0.0758877 0.44828 -0.0512867 0.185744 0.219318C-0.0767918 0.489925 -0.05054 0.908133 0.23825 1.15414L10.3984 9.76433C10.6609 9.98573 10.6609 10.3055 10.3984 10.5269L0.23825 18.8419C-0.05054 19.0879 -0.0767918 19.5061 0.159491 19.7768C0.422027 20.0474 0.868336 20.072 1.15713 19.8506L11.3173 11.511C12.2099 10.773 12.2361 9.54292 11.3435 8.78031L1.18338 0.170116Z"
      fill="#9F9F9E"
    />
  </Svg>
);
// const ChevronDownIcon = (props) => (
//   <svg
//     width={12}
//     height={20}
//     viewBox="0 0 12 20"
//     fill="none"
//     xmlns="http://www.w3.org/2000/svg"
//     {...props}
//   >
//     <path
//       d="M11.8157 0.171574C12.1045 -0.0754298 12.5508 -0.0507479 12.8134 0.219456C13.0759 0.489661 13.1021 0.907993 12.8134 1.15444L1.18361 18.7714C0.921074 18.9928 0.921074 19.3126 1.18361 19.534L11.3437 9.82908C12.2363 9.09102 12.2626 7.86079 11.37 7.09828L0.663961 0.171574C0.427895 -0.051855 0.0522931 -0.0773593 0.0522931 0.26631C0.0522931 0.572979 0.427895 0.598484 0.663961 0.327375L11.8157 0.171574Z"
//       fill="#9F9F9E"
//     />
//   </svg>
// );

const CrossIcon = (props) => (
  <Svg
    width={8}
    height={9}
    viewBox="0 0 8 9"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M7.28388 0.730876L4.00042 4.01469L0.716952 0.730876C0.63798 0.658602 0.53417 0.619587 0.42715 0.621958C0.320129 0.62433 0.218149 0.667905 0.142456 0.743607C0.066762 0.819309 0.0231911 0.921299 0.0208198 1.02833C0.0184485 1.13536 0.0574596 1.23918 0.129726 1.31816L3.41153 4.60198L0.128893 7.88496C0.0887892 7.92318 0.0567302 7.96904 0.0346007 8.01983C0.0124713 8.07063 0.000717939 8.12533 3.18754e-05 8.18073C-0.000654188 8.23613 0.00974083 8.29111 0.0306057 8.34244C0.0514705 8.39376 0.0823842 8.4404 0.12153 8.4796C0.160675 8.51881 0.207262 8.54979 0.258552 8.57073C0.309843 8.59167 0.364801 8.60215 0.420197 8.60154C0.475593 8.60093 0.530309 8.58925 0.581127 8.56719C0.631946 8.54513 0.677843 8.51314 0.716119 8.47308L4.00042 5.1901L7.28388 8.47392C7.36285 8.54619 7.46666 8.58521 7.57368 8.58283C7.6807 8.58046 7.78268 8.53689 7.85838 8.46118C7.93407 8.38548 7.97764 8.28349 7.98001 8.17646C7.98238 8.06943 7.94337 7.96561 7.87111 7.88663L4.58764 4.60281L7.87111 1.31816C7.91121 1.27994 7.94327 1.23408 7.9654 1.18329C7.98753 1.1325 7.99928 1.07779 7.99997 1.02239C8.00065 0.966993 7.99026 0.912014 7.96939 0.860688C7.94853 0.809363 7.91762 0.762727 7.87847 0.723522C7.83932 0.684316 7.79274 0.653333 7.74145 0.632394C7.69016 0.611454 7.6352 0.60098 7.5798 0.601587C7.52441 0.602195 7.46969 0.613872 7.41887 0.635932C7.36805 0.657992 7.32216 0.689989 7.28388 0.730043V0.730876Z"
      fill="gray"
    />
  </Svg>
);

const PhoneCallSvg = (props) => (
  <Svg
    width={55}
    height={54}
    viewBox="0 0 55 54"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M40.0245 27C46.9415 27 52.5489 21.4036 52.5489 14.5C52.5489 7.59645 46.9415 2 40.0245 2C33.1075 2 27.5 7.59645 27.5 14.5C27.5 16.4996 27.9704 18.3896 28.8068 20.0656C29.0292 20.511 29.1031 21.0201 28.9744 21.5008L28.2284 24.2833C27.9045 25.4913 29.0117 26.5963 30.2221 26.273L33.01 25.5285C33.4917 25.4 34.0017 25.4738 34.4481 25.6958C36.1274 26.5305 38.021 27 40.0245 27Z"
      stroke="#09AA29"
      strokeWidth={3}
    />
    <Path
      d="M35.0156 14.5H45.0352M40.0254 19.5V9.5"
      stroke="#09AA29"
      strokeWidth={3}
      strokeLinecap="round"
    />
    <Path
      d="M2.46954 21.8327C2.28833 26.603 3.49799 34.7043 11.6403 42.8308C13.6047 44.7913 15.5676 46.349 17.4825 47.5818M6.30518 14.3431C9.79437 10.8607 15.3613 11.3286 17.5766 15.2904L19.2023 18.1978C20.6695 20.8215 20.0805 24.2632 17.7698 26.5695C17.7698 26.5695 14.9673 29.367 20.0488 34.4388C25.1287 39.5088 27.9334 36.7132 27.9334 36.7132C30.2442 34.407 33.6926 33.8193 36.3215 35.2835L39.2345 36.906C43.2042 39.117 43.6729 44.673 40.1838 48.1555C38.0872 50.248 35.5187 51.8763 32.6794 51.9835C30.6404 52.0608 27.9938 51.8852 24.9972 51.0277"
      stroke="#09AA29"
      strokeWidth={3}
      strokeLinecap="round"
    />
  </Svg>
);
// const Checkout = props => {
//   const [showAlert, setShowAlert] = useState(false);

//   const dispatch = useDispatch();
//   const checkout = useSelector(state => state.CustomerSlice.cart);

//   const subtotal = checkout
//     .filter(item => item && typeof item.price === 'number')
//     .reduce(
//       (acc, curr) =>
//         acc + (curr.perPrice ? curr.perPrice : curr.price) * curr.quantity,
//       0,
//     );
//   const ItemAdd = checkout.length;

//   const handleRemoveCart = () => {
//     dispatch(emptyCart());
//   };

//   const handleGoToCash = () => {
//     if (checkout.length > 0) {
//       // Proceed with checkout
//     } else {
//       setShowAlert(true);
//     }
//   };

//   const windowWidth = Dimensions.get('window').width;

//   const handleDecrement = e => {
//     dispatch(removeFromCart(e));
//   };

//   const HandleRemoveItem = e => {
//     dispatch(removeItemfromCart(e));
//   };



//   /// Accordian //

//   // const AccordionItem = ({ title, content }) => {
//   //   const [isExpanded, setIsExpanded] = useState(false);
//   //   const [animation, setAnimation] = useState(new Animated.Value(0));
  
//   //   const toggleAccordion = () => {
//   //     const initialValue = isExpanded ? 1 : 0;
//   //     const finalValue = isExpanded ? 0 : 1;
  
//   //     setIsExpanded(!isExpanded);
//   //     animation.setValue(initialValue);
//   //     Animated.timing(animation, {
//   //       toValue: finalValue,
//   //       duration: 300,
//   //       useNativeDriver: false,
//   //     }).start();
//   //   };
  
//   //   const rotateIcon = animation.interpolate({
//   //     inputRange: [0, 1],
//   //     outputRange: ['0deg', '90deg'],
//   //   });

 
    
   
    
  
//   //   return (
//   //     <View>
//   //       <TouchableOpacity onPress={toggleAccordion}>
//   //         <View style={{ flexDirection: 'row', alignItems: 'center' }}>
//   //           <Text>{title}</Text>
//   //           <Animated.View style={{ transform: [{ rotate: rotateIcon }] }}>
//   //             {/* {isExpanded } */}
//   //             <ChevronUpIcon/>
//   //           </Animated.View>
//   //         </View>
//   //       </TouchableOpacity>
//   //       {isExpanded && (
//   //         <Animated.View style={{ height: animation.interpolate({
//   //           inputRange: [0, 1],
//   //           outputRange: [0, 100], // Adjust the height according to your content
//   //         }), overflow: 'hidden' }}>
//   //           <Text>{content}</Text>
//   //         </Animated.View>
//   //       )}
//   //     </View>
//   //   );
//   // };

//   // const AccordionItem = ({ title, content }) => {
//   //   const [isExpanded, setIsExpanded] = useState(false);
//   //   const [animation, setAnimation] = useState(new Animated.Value(0));
  
//   //   const toggleAccordion = () => {
//   //     const initialValue = isExpanded ? 1 : 0;
//   //     const finalValue = isExpanded ? 0 : 1;
  
//   //     setIsExpanded(!isExpanded);
//   //     animation.setValue(initialValue);
//   //     Animated.timing(animation, {
//   //       toValue: finalValue,
//   //       duration: 300,
//   //       useNativeDriver: false,
//   //     }).start();
//   //   };
  
//   //   const rotateIcon = animation.interpolate({
//   //     inputRange: [0, 1],
//   //     outputRange: ['0deg', '90deg'],
//   //   });

 
    
   
    
  
//   //   return (
//   //     <View>
//   //       <TouchableOpacity onPress={toggleAccordion}>
//   //         <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
//   //           <View style={{ flexDirection: 'row', alignItems: 'center' }}>
//   //             <Animated.View style={{ transform: [{ rotate: rotateIcon }] }}>
//   //               {/* {isExpanded } */}
//   //               <ChevronUpIcon/>
//   //             </Animated.View>
//   //             <Text style ={{paddingHorizontal:10, marginLeft:10}}>{title}</Text>
//   //           </View>
//   //           {/* Add any other elements you want on the right side */}
//   //         </View>
//   //       </TouchableOpacity>
//   //       {isExpanded && (
//   //         <Animated.View style={{ height: animation.interpolate({
//   //           inputRange: [0, 1],
//   //           outputRange: [0, 100], // Adjust the height according to your content
//   //         })}}>
//   //           <Text>{content}</Text>
//   //         </Animated.View>
//   //       )}
//   //     </View>
//   //   );
//   // };
// //   const AccordionItem = ({ title, content }) => {
// //     const [isExpanded, setIsExpanded] = useState(false);
// //     const [rotationAnimation] = useState(new Animated.Value(0));
  
// //     const toggleAccordion = () => {
// //       const initialValue = isExpanded ? 1 : 0;
// //       const finalValue = isExpanded ? 0 : 1;
  
// //       setIsExpanded(!isExpanded);
      
// //       // Toggle rotation animation
// //       Animated.timing(rotationAnimation, {
// //         toValue: finalValue,
// //         duration: 300,
// //         useNativeDriver: true,
// //       }).start();
// //     };
  
// //     const rotateIcon = rotationAnimation.interpolate({
// //       inputRange: [0, 1],
// //       outputRange: ['0deg', '90deg'],
// //     });

// //     return (
// //       <View>
// //         <TouchableOpacity onPress={toggleAccordion}>
// //           <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
// //             <View style={{ flexDirection: 'row', alignItems: 'center' }}>
// //               <Animated.View style={{ transform: [{ rotate: rotateIcon }] }}>
// //                 <ChevronUpIcon/>
// //               </Animated.View>
// //               <Text>{title}</Text>
// //             </View>
// //             {/* Add any other elements you want on the right side */}
// //           </View>
// //         </TouchableOpacity>
// //         {isExpanded && (
// //           <Animated.View style={{ height: animation.interpolate({
// //             inputRange: [0, 1],
// //             outputRange: [0, 100], // Adjust the height according to your content
// //           }), overflow: 'hidden' }}>
// //             <Text>{content}</Text>
// //           </Animated.View>
// //         )}
// //       </View>
// //     );
// // };

// // const AccordionItem = ({ title, content }) => {
// //   const [isExpanded, setIsExpanded] = useState(false);
// //   const [animation, setAnimation] = useState(new Animated.Value(0));

// //   const toggleAccordion = () => {
// //     const initialValue = isExpanded ? 1 : 0;
// //     const finalValue = isExpanded ? 0 : 1;

// //     setIsExpanded(!isExpanded);
// //     animation.setValue(initialValue);
// //     Animated.timing(animation, {
// //       toValue: finalValue,
// //       duration: 300,
// //       useNativeDriver: false,
// //     }).start();
// //   };

// //   const rotateIcon = animation.interpolate({
// //     inputRange: [0, 1],
// //     outputRange: ['0deg', '90deg'],
// //   });

// //   return (
// //     <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#ccc' }}>
// //       <TouchableOpacity onPress={toggleAccordion}>
// //         <View style={{ flexDirection: 'row', alignItems: 'center' }}>
// //           <Animated.View style={{ transform: [{ rotate: rotateIcon }], marginRight: 10 }}>
// //             <ChevronUpIcon />
// //           </Animated.View>
// //           <Text>{title}</Text>
// //         </View>
// //       </TouchableOpacity>
// //       {isExpanded && (
// //         <Animated.View style={{ height: animation.interpolate({
// //           inputRange: [0, 1],
// //           outputRange: [0, 100], // Adjust the height according to your content
// //         }), overflow: 'hidden' }}>
// //           <Text>{content}</Text>
// //         </Animated.View>
// //       )}
// //     </View>
// //   );
// // };

// const AccordionItem = ({ title, content }) => {
//   const [isExpanded, setIsExpanded] = useState(false);
//   const [animation, setAnimation] = useState(new Animated.Value(0));
//   const contentHeight = useRef(null);

//   const toggleAccordion = () => {
//     const initialValue = isExpanded ? 1 : 0;
//     const finalValue = isExpanded ? 0 : 1;

//     setIsExpanded(!isExpanded);
//     animation.setValue(initialValue);
//     Animated.timing(animation, {
//       toValue: finalValue,
//       duration: 300,
//       useNativeDriver: false,
//     }).start();
//   };

//   const rotateIcon = animation.interpolate({
//     inputRange: [0, 1],
//     outputRange: ['0deg', '90deg'],
//   });

//   const handleLayout = (event) => {
//     contentHeight.current = event.nativeEvent.layout.height;
//   };

//   return (
//     <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#ccc' }}>
//       <TouchableOpacity onPress={toggleAccordion}>
//         <View style={{ flexDirection: 'row', alignItems: 'center' }}>
//           <Animated.View style={{ transform: [{ rotate: rotateIcon }], marginRight: 10 }}>
//             <ChevronUpIcon />
//           </Animated.View>
//           <Text>{title}</Text>
//         </View>
//       </TouchableOpacity>
//       {isExpanded && (
//         <Animated.View
//           onLayout={handleLayout}
//           // style={{
//           //   height: animation.interpolate({
//           //     inputRange: [0, 1],
//           //     outputRange: [0, contentHeight.current],
//           //   }),
//           //   overflow: 'hidden',
//           // }}
//         >
//           <Text>{content}</Text>
//         </Animated.View>
//       )}
//     </View>
//   );
// };




//   return (
//     <View style={[styles.container, {color: 'black'}]}>
//       <View style={{width: '40%', alignSelf: 'flex-end', paddingRight: 10}}>
//         <TouchableOpacity
//           style={{
//             borderRadius: 8,
//             backgroundColor: '#FC8019',
//             padding: 10,
//             alignSelf: 'center',
//             flexDirection: 'row',
//             alignItems: 'center',
//             justifyContent: 'center',
//           }}>
//           <Text>
//             <PlusIcon />{' '}
//           </Text>
//           <Text
//             style={{
//               color: '#F5F5F5',
//               alignSelf: 'center',
//               textAlign: 'center',
//             }}>
//             {' '}
//             New Customer
//           </Text>
//         </TouchableOpacity>
//       </View>
//       <View
//         style={[
//           styles.header,
//           {
//             paddingHorizontal: windowWidth * 0.05,
//             marginTop: windowWidth * 0.05,
//           },
//         ]}>
//         <Text style={styles.headerText}>Cart</Text>
//         <Pressable onPress={handleRemoveCart} style={styles.deleteButton}>
//           {/* <AntDesign name="delete" size={18} color="red" /> */}
//           <Text style={{color: '#09AA29', fontSize: 16}}>clear all</Text>
//         </Pressable>
//       </View>
//       <ScrollView style={styles.scrollView}>
//         {checkout.length === 0 ? (
//           <View style={styles.noItemsContainer}>
//             <Text style={styles.noItemsText}>
//               No items available in the cart.
//             </Text>
//             <CheckoutSvg />
//           </View>
//         ) : (
//           checkout.map((e, index) => (
// console.log(e,'from checkout'),
//             // <View style = {{flexDirection:'row'} }>
//             //     <View style ={{flexDirection: 'row'}}>
//             //     <View>
//             //       <Text>{e.quantity}</Text>
                 
//             //       </View>
//             //       <View>
//             //       <Text>{e.name}</Text>
//             //       <Text>{e.unit}  
                                   
//             //       </Text>
//             //       </View>
                  
//             //       </View>
//             //       <View>
                  
//             //       <Text style={styles.itemPrice}>{`${
//             //       e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`
//             //     }`}</Text>
//             //     <Text >{e.totalPrice}</Text>
//             //       </View>
//             // </View>
// <View style = {{flexDirection:'row', width:'100%'}}>
// {/* <AccordionItem
// title="What does the 'type' prop of the Accordion component do?"
// content="The type prop determines whether one or multiple items can be opened at the same time. The default value is 'single' which means only one item can be opened at a time."
// /> */}
// <AccordionItem
//   title={
//     // <View style={{ width:'100%', flexDirection: 'row', justifyContent:'space-between', alignContent:'space-between'}}>
//     //   <View style={{ flexDirection: 'row' }}>
//     //     <View>
//     //       <Text>{e.quantity}</Text>
//     //     </View>
//     //     <View>
//     //       <Text>{e.name}</Text>
//     //       <Text>{e.unit}</Text>
//     //     </View>
//     //   </View>
//     //   <View>
//     //     <Text style={styles.itemPrice}>
//     //       {e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`}
//     //     </Text>
//     //     <Text>₹{e.totalPrice}</Text>
//     //   </View>
//     // </View>
//     <>
//     <View style={{ width: '100%', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
//   <View style={{ flexDirection: 'row', alignItems: 'center' }}>
//     <View>
//       <Text>{e.quantity}</Text>
//     </View>
//     <View style={{ marginLeft: 8 }}>
//       <Text>{e.name}</Text>
//       <Text>{e.unit}</Text>
//     </View>
//   </View>
//   <View style={{ alignItems: 'flex-end' }}>
//     <Text style={styles.itemPrice}>
//       {e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`}
//     </Text>
//     <Text>₹{e.totalPrice}</Text>
//   </View>
// </View>
//   </>
//   }
//   content={
//     <View>
//     {/* <TextInput
//     style = {{borderWidth:1}}
//       // onChange={handleChange}
//       // value={inputValue}
//       // onKeyPress={handleKeyDown}
//       placeholder="Type here"
//     />
//     <TouchableOpacity>
//       <Text>Save</Text>
//     </TouchableOpacity> */}
//     <ParticularItem item = {e} />
//   </View>
//   }
// />

// {/* <AccordionItem
// title="What is a controlled accordion? How can I make it controlled?"
// content="Controlled components refer to the components where the state and behaviors are controlled by the Parent component. You can make the accordion a controlled component by passing the value prop to the Accordion component and setting the onValueChange prop to update the value prop."
// /> */}
// <TouchableOpacity onPress={() => HandleRemoveItem(e.id)}>
//  <CrossIcon/>
//  </TouchableOpacity>


//  <View style={styles.subtotalContainer}>
//                <Text style={''}>Subtotal</Text>
//                 <Text style={''}>₹ {subtotal}</Text>
//               </View>
//             <View style={''}>
//                 <Text style={''}>Total</Text>
//                 <Text style={''}>{ItemAdd} Item</Text>
//                 <Text style={''}>₹ {subtotal}</Text>
//               </View>
//            <Pressable style={styles.checkoutButton} onPress={handleGoToCash}>
//                <Text style={styles.checkoutButtonText}>Checkout</Text>
//               </Pressable>

// </View>    
//             // <View key={index} style={styles.itemContainer}>
//             //   <View style={styles.imageContainer}>
//             //     <Image source={{uri: e.image}} style={styles.image} />
//             //     <View>
//             //       {!e.perPrice && (
//             //         <Text style={styles.quantity}>{e.quantity}</Text>
//             //       )}
//             //     </View>
//             //     <View style={styles.detailsContainer}>
//             //       <Text style={styles.name}>{e.name}</Text>
//             //       <Text style={styles.taxExempt}>Tax-exempt</Text>
//             //       {e.perPrice && (
//             //         <Text style={styles.weight}>{e.quantity} gms</Text>
//             //       )}
//             //     </View>
//             //   </View>
//             //   <View style={styles.priceContainer}>
//             //     <Text style={styles.itemPrice}>{`${
//             //       e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`
//             //     }`}</Text>
//             //     <Text style={styles.totalPrice}>
//             //       ₹{' '}
//             //       {(e.perPrice
//             //         ? e.perPrice * e.quantity
//             //         : e.price * e.quantity
//             //       ).toFixed(2)}
//             //     </Text>
//             //   </View>
//             //   <TouchableOpacity
//             //     style={{
//             //       flex: 1,
//             //       padding: 10,
//             //       backgroundColor: 'blue',
//             //       borderRadius: 5,
//             //       marginLeft: 5,
//             //     }}
//             //     onPress={() => handleDecrement(e.id)}>
//             //     <Text
//             //       style={{
//             //         textAlign: 'center',
//             //         fontSize: 16,
//             //         fontWeight: '700',
//             //         color: 'white',
//             //       }}>
//             //       -
//             //     </Text>
//             //   </TouchableOpacity>
//             //   <TouchableOpacity
//             //     style={{
//             //       flex: 1,
//             //       padding: 10,
//             //       backgroundColor: 'blue',
//             //       borderRadius: 5,
//             //       marginLeft: 5,
//             //     }}
//             //     onPress={() => HandleRemoveItem(e.id)}>
//             //     <Text
//             //       style={{
//             //         textAlign: 'center',
//             //         fontSize: 16,
//             //         fontWeight: '700',
//             //         color: 'white',
//             //       }}>
//             //       RemoveItem
//             //     </Text>
//             //   </TouchableOpacity>
//             //   <View style={styles.subtotalContainer}>
//             //     <Text style={styles.subtotalText}>Subtotal</Text>
//             //     <Text style={styles.subtotalPrice}>₹ {subtotal}</Text>
//             //   </View>
//             //   <View style={styles.totalContainer}>
//             //     <Text style={styles.totalText}>Total</Text>
//             //     <Text style={styles.totalItem}>{ItemAdd} Item</Text>
//             //     <Text style={styles.totalPrice}>₹ {subtotal}</Text>
//             //   </View>
//             //   <Pressable style={styles.checkoutButton} onPress={handleGoToCash}>
//             //     <Text style={styles.checkoutButtonText}>Checkout</Text>
//             //   </Pressable>
//             // </View>
//           //   <View>
//           //   <Text>this is cash</Text>
//           // </View>
//           ))

//           )
         
//         }
//       </ScrollView>
//       {/* <View style={styles.subtotalContainer}>
//         <Text style={styles.subtotalText}>Subtotal</Text>
//         <Text style={styles.subtotalPrice}>₹ {subtotal}</Text>
//       </View>
//       <View style={styles.totalContainer}>
//         <Text style={styles.totalText}>Total</Text>
//         <Text style={styles.totalItem}>{ItemAdd} Item</Text>
//         <Text style={styles.totalPrice}>₹ {subtotal}</Text>
//       </View>
//       <Pressable style={styles.checkoutButton} onPress={handleGoToCash}>
//         <Text style={styles.checkoutButtonText}>Checkout</Text>
//       </Pressable> */}
//       {/* <TouchableOpacity onPress={() => { if (typeof props.onGoBack === 'function') { props.onGoBack(); } }}>
//         <Text>Go back</Text>
//       </TouchableOpacity> */}
//       {showAlert && (
//         <View style={styles.alertContainer}>
//           <View style={styles.alertBox}>
//             <Text style={styles.alertText}>
//               Please add items to the cart before proceeding to checkout.
//             </Text>
//             <Pressable
//               onPress={() => setShowAlert(false)}
//               style={styles.okButton}>
//               <Text style={styles.okButtonText}>OK</Text>
//             </Pressable>
//           </View>
//         </View>
//       )}
//     </View>
//   );
// };

const Checkout = ({changeContent,changeTab})=> {

  console.log('Hello', changeContent)
  

  const { handleTabPress } = useTabNavigation();

  console.log(handleTabPress, 'handleprecs')
  const [showAlert, setShowAlert] = useState(false);

  const dispatch = useDispatch();

  const ChaneTabcontent= (index, component)=>{
    changeTab(index)
    changeContent(index, component)
  }
  
  const checkout = useSelector(state => state.CustomerSlice.cart);

  const subtotal = checkout
    .filter(item => item && typeof item.price === 'number')
    .reduce(
      (acc, curr) =>
        acc + (curr.perPrice ? curr.perPrice : curr.price) * curr.quantity,
      0,
    );
  const ItemAdd = checkout.length;

  const handleRemoveCart = () => {
    dispatch(emptyCart());
  };

  const handleId = (id) => {
    dispatch(addIndex(id ));
    console.log(dispatch(addIndex(id ), ' this is dispatch'))
  };
  const indexid = useSelector(state => state.CustomerSlice.index.index);
  console.log(indexid, 'indexid')
  const handleGoToCash = () => {
    if (checkout.length > 0) {
      // Proceed with checkout
    // } else {
      setShowAlert(true);
    }
  };

  const windowWidth = Dimensions.get('window').width;

  const handleDecrement = e => {
    dispatch(removeFromCart(e));
  };

  const HandleRemoveItem = e => {
    dispatch(removeItemfromCart(e));
  };

  const AccordionItem = ({ title, content }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const [animation, setAnimation] = useState(new Animated.Value(0));
    const contentHeight = useRef(null);

    const toggleAccordion = () => {
      const initialValue = isExpanded ? 1 : 0;
      const finalValue = isExpanded ? 0 : 1;

      setIsExpanded(!isExpanded);
      animation.setValue(initialValue);
      Animated.timing(animation, {
        toValue: finalValue,
        duration: 300,
        useNativeDriver: false,
      }).start();
    };

    const rotateIcon = animation.interpolate({
      inputRange: [0, 1],
      outputRange: ['0deg', '90deg'],
    });

    const handleLayout = (event) => {
      contentHeight.current = event.nativeEvent.layout.height;
    };

    return (
      <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#ccc' }}>
        <TouchableOpacity onPress={toggleAccordion}>
          <View style={{ flexDirection: 'row', alignItems: 'center' }}>
            <Animated.View style={{ transform: [{ rotate: rotateIcon }], marginRight: 10 }}>
              <ChevronUpIcon />
            </Animated.View>
            <Text>{title}</Text>
          </View>
        </TouchableOpacity>
        {isExpanded && (
          <Animated.View onLayout={handleLayout}>
            <Text>{content}</Text>
          </Animated.View>
        )}
      </View>
    );
  };

  // return (
  //   <View style={[styles.container, {color: 'black'}]}>
  //     <View style={{width: '40%', alignSelf: 'flex-end', paddingRight: 10}}>
  //       <TouchableOpacity
  //         style={{
  //           borderRadius: 8,
  //           backgroundColor: '#FC8019',
  //           padding: 10,
  //           alignSelf: 'center',
  //           flexDirection: 'row',
  //           alignItems: 'center',
  //           justifyContent: 'center',
  //         }}>
  //         <Text>
  //           <PlusIcon />{' '}
  //         </Text>
  //         <Text
  //           style={{
  //             color: '#F5F5F5',
  //             alignSelf: 'center',
  //             textAlign: 'center',
  //           }}>
  //           {' '}
  //           New Customer
  //         </Text>
  //       </TouchableOpacity>
  //     </View>
  //     <View
  //       style={[
  //         styles.header,
  //         {
  //           paddingHorizontal: windowWidth * 0.05,
  //           marginTop: windowWidth * 0.05,
  //         },
  //       ]}>
  //       <Text style={styles.headerText}>Cart</Text>
  //       <Pressable onPress={handleRemoveCart} style={styles.deleteButton}>
  //         <Text style={{color: '#09AA29', fontSize: 16}}>clear all</Text>
  //       </Pressable>
  //     </View>
  //     <ScrollView style={styles.scrollView}>
  //       {checkout.length === 0 ? (
  //         <View style={styles.noItemsContainer}>
  //           <Text style={styles.noItemsText}>
  //             No items available in the cart.
  //           </Text>
  //           <CheckoutSvg />
  //         </View>
  //       ) : (
  //         checkout.map((e, index) => (
  //           <View style={{flexDirection:'row', width:'100%'}} key={index}>
  //             <AccordionItem
  //               title={
  //                 <>
  //                   <View style={{ width: '100%', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
  //                     <View style={{ flexDirection: 'row', alignItems: 'center' }}>
  //                       <View>
  //                         <Text>{e.quantity}</Text>
  //                       </View>
  //                       <View style={{ marginLeft: 8 }}>
  //                         <Text>{e.name}</Text>
  //                         <Text>{e.unit}</Text>
  //                       </View>
  //                     </View>
  //                     <View style={{ alignItems: 'flex-end' }}>
  //                       <Text style={styles.itemPrice}>
  //                         {e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`}
  //                       </Text>
  //                       <Text>₹{e.totalPrice}</Text>
  //                     </View>
  //                   </View>
  //                 </>
  //               }
  //               content={
  //                 <View>
  //                   <ParticularItem item={e} />
  //                 </View>
  //               }
  //             />
  //             <TouchableOpacity onPress={() => HandleRemoveItem(e.id)}>
  //               <CrossIcon/>
  //             </TouchableOpacity>

  //             <View style={styles.subtotalContainer}>
  //               <Text style={''}>Subtotal</Text>
  //               <Text style={''}>₹ {subtotal}</Text>
  //             </View>
  //             <View style={''}>
  //               <Text style={''}>Total</Text>
  //               <Text style={''}>{ItemAdd} Item</Text>
  //               <Text style={''}>₹ {subtotal}</Text>
  //             </View>
  //             <Pressable style={styles.checkoutButton} onPress={handleGoToCash}>
  //               <Text style={styles.checkoutButtonText}>Checkout</Text>
  //             </Pressable>
  //           </View>
  //         ))
  //       )}
  //     </ScrollView>
  //     {showAlert && (
  //       <View style={styles.alertContainer}>
  //         <View style={styles.alertBox}>
  //           <Text style={styles.alertText}>
  //             Please add items to the cart before proceeding to checkout.
  //           </Text>
  //           <Pressable
  //             onPress={() => setShowAlert(false)}
  //             style={styles.okButton}>
  //             <Text style={styles.okButtonText}>OK</Text>
  //           </Pressable>
  //         </View>
  //       </View>
  //     )}
  //   </View>
  // );


  // return (
  //   <View style={[styles.container, {color: 'black'}]}>
  //     <View style={{width: '40%', alignSelf: 'flex-end', paddingRight: 10}}>
  //       <TouchableOpacity style={{ borderRadius: 8, backgroundColor: '#FC8019', padding: 10, alignSelf: 'center', flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>
  //         <Text><PlusIcon />{' '}</Text>
  //         <Text style={{ color: '#F5F5F5', alignSelf: 'center', textAlign: 'center' }}>New Customer</Text>
  //       </TouchableOpacity>
  //     </View>
  //     <View style={[styles.header, { paddingHorizontal: windowWidth * 0.05, marginTop: windowWidth * 0.05 }]}>
  //       <Text style={styles.headerText}>Cart</Text>
  //       <Pressable onPress={handleRemoveCart} style={styles.deleteButton}>
  //         <Text style={{ color: '#09AA29', fontSize: 16 }}>clear all</Text>
  //       </Pressable>
  //     </View>
  //     <ScrollView style={styles.scrollView}>
  //       {checkout.length === 0 ? (
  //         <View style={styles.noItemsContainer}>
  //           <Text style={styles.noItemsText}>No items available in the cart.</Text>
  //           <CheckoutSvg />
  //         </View>
  //       ) : (
  //         <>
  //           {checkout.map((e, index) => (
  //             <><AccordionItem
  //               key={index}
  //               title={<>
  //                 <View style={{ width: '100%', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
  //                   <View style={{ flexDirection: 'row', alignItems: 'center' }}>
  //                     <View>
  //                       <Text>{e.quantity}</Text>
  //                     </View>
  //                     <View style={{ marginLeft: 8 }}>
  //                       <Text>{e.name}</Text>
  //                       <Text>{e.unit}</Text>
  //                     </View>
  //                   </View>
  //                   <View style={{ alignItems: 'flex-end' }}>
  //                     <Text style={styles.itemPrice}>{e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`}</Text>
  //                     <Text>₹{e.totalPrice}</Text>
  //                   </View>
  //                 </View>
  //               </>}
  //               content={<View>
  //                 <ParticularItem item={e} />
  //               </View>} /><TouchableOpacity onPress={() => HandleRemoveItem(e.id)}>
  //                 <CrossIcon />
  //               </TouchableOpacity></>
  //           ))} 
  //           <View style={styles.subtotalContainer}>
  //             <Text style={''}>Subtotal</Text>
  //             <Text style={''}>₹ {subtotal}</Text>
  //           </View>
  //           <View style={''}>
  //             <Text style={''}>Total</Text>
  //             <Text style={''}>{ItemAdd} Item</Text>
  //             <Text style={''}>₹ {subtotal}</Text>
  //           </View>
  //           <Pressable style={styles.checkoutButton} onPress={handleGoToCash}>
  //             <Text style={styles.checkoutButtonText}>Checkout</Text>
  //           </Pressable>
  //         </>
  //       )}
  //     </ScrollView>
  //     {showAlert && (
  //       <View style={styles.alertContainer}>
  //         <View style={styles.alertBox}>
  //           <Text style={styles.alertText}>Please add items to the cart before proceeding to checkout.</Text>
  //           <Pressable onPress={() => setShowAlert(false)} style={styles.okButton}>
  //             <Text style={styles.okButtonText}>OK</Text>
  //           </Pressable>
  //         </View>
  //       </View>
  //     )}
  //   </View>
  // );



  // Modal of the  proceed 

  const PopupModal = ({ visible, onClose }) => {
    const [input1, setInput1] = useState('');
    const [input2, setInput2] = useState('');
    const [showFirstModal, setShowFirstModal] = useState(true);
    const [showSecondModal, setShowSecondModal] = useState(false);
    const [showThirdComponent, setShowThirdComponent] = useState(false);
  
    // const handleProceedFirstModal = () => {
    //   setShowFirstModal(false);
    //   setShowSecondModal(true);
    // };
    const [inputNumber, setInputNumber] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
  
    const handleProceedFirstModal = () => {
      if (inputNumber.trim() === '') {
        setErrorMessage('Please provide your number');
      } else if (inputNumber.length < 10) {
        setErrorMessage('Number should be at least 10 digits');
      } else if (!/^\d{10}$/.test(inputNumber)) {
        setErrorMessage('Please enter a valid 10-digit number');
      } else {
        // Proceed with the logic when the input is valid
        // You can call an API or perform any other action here
        setErrorMessage('');
        setShowFirstModal(false);
        setShowSecondModal(true);
      }
    };
  
    const handleProceedSecondModal = () => {
      setShowSecondModal(false);
      setShowThirdComponent(true);
    };
  
    const handleSkip = () => {
      onClose(); // Close the modal
    };
  
    const handleOverlayClick = () => {
      onClose(); // Close the modal when clicking outside
    };
  
    return (
      <>
        <Modal
      visible={visible}
      transparent
      animationType="slide"
      onRequestClose={onClose}
    >
      <TouchableWithoutFeedback onPress={handleOverlayClick}>
        <View style={popupStyles.modalContainer}>
          <View style={popupStyles.modalContent}>
            <View>
              <PhoneCallSvg />
            </View>
            <Text>Before You Proceed Please Enter Your Number</Text>
            <Text style={{ alignSelf: 'flex-start' }}>Whatsapp Number</Text>
            <TextInput
              style={popupStyles.input}
              value={inputNumber}
              onChangeText={setInputNumber}
              placeholder={errorMessage || 'Provide your number here'}
              keyboardType="phone-pad" // Show number keyboard
            />
            {errorMessage && (
              <Text style={{ color: 'red', marginTop: 8 }}>{errorMessage}</Text>
            )}
            <View style={popupStyles.buttonContainer}>
              <Button title="Skip" onPress={handleSkip} />
              <Button title="Proceed" onPress={handleProceedFirstModal} />
            </View>
          </View>
        </View>
      </TouchableWithoutFeedback>
    </Modal>
  
        <Modal
          visible={showSecondModal}
          transparent
          animationType="slide"
          onRequestClose={onClose}
        >
          {/* <TouchableWithoutFeedback onPress={handleOverlayClick}>
            <View style={popupStyles.modalContainer}>
              <View style={popupStyles.modalContent}>
                <Text>Second Modal Content</Text>
                <Button title="Proceed" onPress={handleProceedSecondModal} />
              </View>
            </View>
          </TouchableWithoutFeedback> */}
          <TouchableWithoutFeedback onPress={handleOverlayClick}>
            <View style={popupStyles.modalContainer}>
              <View style={popupStyles.modalContent}>
                <View>
                  <PhoneCallSvg />
                </View>
                <Text>Before You Proceed Please Enter Your Number</Text>
                <Text style={{ alignSelf: 'flex-start' }}>Whatsapp Number</Text>
                <TextInput
                  style={popupStyles.input}
                  value={input1}
                  onChangeText={setInput1}
                  placeholder="Input 1"
                />
                <TextInput
                  style={popupStyles.input}
                  value={input2}
                  onChangeText={setInput2}
                  placeholder="Input 2"
                />
                <View style={popupStyles.buttonContainer}>
                  <Button title="Skip" onPress={handleSkip} />
                  <Button title="Proceed" onPress={handleProceedFirstModal} />
                </View>
              </View>
            </View>
          </TouchableWithoutFeedback>
        </Modal>
  
        {showThirdComponent && <AnotherComponent />}
      </>
    );
  };
  
const popupStyles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    // backgroundColor: 'rgba(0, 0, 0, 0.5)',
    width:'100%',
    alignSelf:'center'
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
    width:'40%'
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    width: '100%',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 10,
  },
});

const [modalVisible, setModalVisible] = useState(false);
const [modalVisible2, set2ModalVisible] = useState(false);

  
  return (
    <View style={[styles.container, {color: 'black', width:'100%'}]}>
      <View style={{width: '40%', alignSelf: 'flex-end', paddingRight: 10}}>
        <TouchableOpacity style={{ borderRadius: 8, backgroundColor: '#FC8019', padding: 10, alignSelf: 'center', flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }} onPress={()=>{ChaneTabcontent(1, <NewUser changeTabcontent = {changeContent} />)}} >
          <Text><PlusIcon />{' '}</Text>
          <Text style={{ color: '#F5F5F5', alignSelf: 'center', textAlign: 'center' }}>New Customer</Text>
        </TouchableOpacity>
      </View>
      <View style={[styles.header, { paddingHorizontal: windowWidth * 0.05, marginTop: windowWidth * 0.05 }]}>
        <Text style={styles.headerText}>Cart</Text>
        <Pressable onPress={handleRemoveCart} style={styles.deleteButton}>
          <Text style={{ color: '#09AA29', fontSize: 16 }}>clear all</Text>
        </Pressable>
      </View>
      <ScrollView style={{  width:'100%'}}>
        {checkout.length === 0 ? (
          <View style={styles.noItemsContainer}>
            <Text style={styles.noItemsText}>No items available in the cart.</Text>
           
            
            <CheckoutSvg />
            {/* <TouchableOpacity onPress={()=>{handleId(2)}}>
            <Text >Text id</Text>
            </TouchableOpacity> */}
          </View>
        ) : (
          <>
            {checkout.map((e, index) => (
              <View key={index} style= {{display:'flex', flexDirection:'row', width:'100%', justifyContent:'space-between', paddingHorizontal:20}}>
                <View style = {{ width:'90%'}} >
                <AccordionItem 
                  title={<>
                    <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' ,width: '100%',  }}>
                      <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                        <View>
                          <Text>{e.quantity}</Text>
                        </View>
                        <View style={{ marginLeft: 8 }}>
                          <Text>{e.name}</Text>
                          <Text>{e.unit}</Text>
                        </View>
                      </View>
                      <View style={{ alignItems: 'flex-end' }}>
                        <Text style={styles.itemPrice}>{e.perPrice ? '' : `₹ ${e.price} x ${e.quantity}`}</Text>
                        <Text>₹{e.totalPrice}</Text>
                      </View>
                    </View>
                  </>}
                  content={<View>
                    <ParticularItem item={e} />
                  </View>} />
                  </View>
                  <View style = {{width:'100%'}}>
                <TouchableOpacity onPress={() => HandleRemoveItem(e.id)}>
                  <CrossIcon />
                </TouchableOpacity>
                </View>
              </View>
            ))}
          </>
        )}
      </ScrollView>
      {checkout.length>0 ?(
        <View style={styles.fixedBottom}>
        <View style={styles.subtotalContainer}>
          <Text style={''}>Subtotal</Text>
          <Text style={''}>₹ {subtotal.toFixed(2)}</Text>
        </View>
        <View style={''}>
          <Text style={''}>Total</Text>
          <Text style={''}>{ItemAdd} Item</Text>
          <Text style={''}>₹ {subtotal.toFixed(2)}</Text>
        </View>
        <Pressable style={styles.checkoutButton} onPress={() => setModalVisible(true)}>
          <Text style={styles.checkoutButtonText} >Checkout</Text>
        </Pressable>
        <PopupModal visible={modalVisible} onClose={() => setModalVisible(false)} />

      </View> 
      ) :(
        <View></View>
      )

      
      
      }
      {showAlert && (
        <View style={styles.alertContainer}>
          <View style={styles.alertBox}>
            <Text style={styles.alertText}>Please add items to the cart before proceeding to checkout.</Text>
            <Pressable onPress={() => setShowAlert(false)} style={styles.okButton}>
              <Text style={styles.okButtonText}>OK</Text>
            </Pressable>
          </View>
        </View>
      )}
    </View>
  );
};


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    width:'100%'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    marginTop: 10,
  },
  headerText: {
    fontSize: 20,
    fontWeight: '700',
    color: 'black',
  },
  deleteButton: {
    padding: 6,
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: 20,
    marginTop: 10,
  },
  noItemsContainer: {
    alignItems: 'center',
    marginTop: 20,
  },
  noItemsText: {
    fontSize: 20,
    color: 'black',
  },
  itemContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  imageContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  image: {
    width: 70,
    height: 70,
    borderRadius: 10,
  },
  quantity: {
    width: 25,
    height: 25,
    backgroundColor: 'black',
    color: 'white',
    padding: 3,
    borderRadius: 40,
    textAlign: 'center',
  },
  detailsContainer: {
    marginLeft: 10,
  },
  name: {
    fontSize: 16,
    color: 'black',
  },
  taxExempt: {
    fontSize: 16,
    color: 'black',
  },
  weight: {
    fontSize: 12,
    color: 'black',
  },
  priceContainer: {},
  itemPrice: {
    fontSize: 10,
    color: 'black',
  },
  totalPrice: {
    color: 'black',
  },
  checkoutButton: {
    alignSelf: 'center',
    marginTop: 20,
    padding: 10,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
  checkoutButtonText: {
    color: 'white',
    textAlign: 'center',
    fontSize: 16,
  },
  alertContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 20,
  },
  alertBox: {
    backgroundColor: 'white',
    padding: 40,
    borderRadius: 10,
  },
  alertText: {
    fontSize: 16,
    marginBottom: 10,
    color: 'black',
  },
  okButton: {
    padding: 10,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
  okButtonText: {
    color: 'white',
    textAlign: 'center',
  },
});




export default Checkout;
